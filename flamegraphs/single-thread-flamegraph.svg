<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="4980"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (5 samples, 0.10%)</title><rect x="0.0000%" y="325" width="0.1004%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.10%)</title><rect x="0.0000%" y="309" width="0.1004%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="319.50"></text></g><g><title>trx`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.1004%" y="245" width="0.0201%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.3504%" y="255.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$__bzero (1 samples, 0.02%)</title><rect x="0.2209%" y="229" width="0.0201%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="1"/><text x="0.4709%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="0.2410%" y="229" width="0.0402%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="2"/><text x="0.4910%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (26 samples, 0.52%)</title><rect x="3.0321%" y="213" width="0.5221%" height="15" fill="rgb(232,128,0)" fg:x="151" fg:w="26"/><text x="3.2821%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.10%)</title><rect x="3.5542%" y="213" width="0.1004%" height="15" fill="rgb(207,160,47)" fg:x="177" fg:w="5"/><text x="3.8042%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`calloc (8 samples, 0.16%)</title><rect x="3.6546%" y="213" width="0.1606%" height="15" fill="rgb(228,23,34)" fg:x="182" fg:w="8"/><text x="3.9046%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.20%)</title><rect x="3.8153%" y="213" width="0.2008%" height="15" fill="rgb(218,30,26)" fg:x="190" fg:w="10"/><text x="4.0653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.36%)</title><rect x="4.0161%" y="213" width="0.3614%" height="15" fill="rgb(220,122,19)" fg:x="200" fg:w="18"/><text x="4.2661%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="4.3775%" y="213" width="0.1205%" height="15" fill="rgb(250,228,42)" fg:x="218" fg:w="6"/><text x="4.6275%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.14%)</title><rect x="4.4980%" y="213" width="0.1406%" height="15" fill="rgb(240,193,28)" fg:x="224" fg:w="7"/><text x="4.7480%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.12%)</title><rect x="4.6386%" y="213" width="0.1205%" height="15" fill="rgb(216,20,37)" fg:x="231" fg:w="6"/><text x="4.8886%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.24%)</title><rect x="4.7590%" y="213" width="0.2410%" height="15" fill="rgb(206,188,39)" fg:x="237" fg:w="12"/><text x="5.0090%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (9 samples, 0.18%)</title><rect x="5.0000%" y="213" width="0.1807%" height="15" fill="rgb(217,207,13)" fg:x="249" fg:w="9"/><text x="5.2500%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (28 samples, 0.56%)</title><rect x="5.1807%" y="213" width="0.5622%" height="15" fill="rgb(231,73,38)" fg:x="258" fg:w="28"/><text x="5.4307%" y="223.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect x="5.7430%" y="213" width="0.0201%" height="15" fill="rgb(225,20,46)" fg:x="286" fg:w="1"/><text x="5.9930%" y="223.50"></text></g><g><title>trx`&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.02%)</title><rect x="5.7631%" y="213" width="0.0201%" height="15" fill="rgb(210,31,41)" fg:x="287" fg:w="1"/><text x="6.0131%" y="223.50"></text></g><g><title>trx`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="5.7831%" y="213" width="0.0402%" height="15" fill="rgb(221,200,47)" fg:x="288" fg:w="2"/><text x="6.0331%" y="223.50"></text></g><g><title>trx`__rdl_alloc (3 samples, 0.06%)</title><rect x="5.8233%" y="213" width="0.0602%" height="15" fill="rgb(226,26,5)" fg:x="290" fg:w="3"/><text x="6.0733%" y="223.50"></text></g><g><title>trx`__rdl_alloc_zeroed (10 samples, 0.20%)</title><rect x="5.8835%" y="213" width="0.2008%" height="15" fill="rgb(249,33,26)" fg:x="293" fg:w="10"/><text x="6.1335%" y="223.50"></text></g><g><title>trx`__rdl_dealloc (17 samples, 0.34%)</title><rect x="6.0843%" y="213" width="0.3414%" height="15" fill="rgb(235,183,28)" fg:x="303" fg:w="17"/><text x="6.3343%" y="223.50"></text></g><g><title>trx`__rust_alloc_zeroed (7 samples, 0.14%)</title><rect x="6.4257%" y="213" width="0.1406%" height="15" fill="rgb(221,5,38)" fg:x="320" fg:w="7"/><text x="6.6757%" y="223.50"></text></g><g><title>trx`__rust_dealloc (5 samples, 0.10%)</title><rect x="6.5663%" y="213" width="0.1004%" height="15" fill="rgb(247,18,42)" fg:x="327" fg:w="5"/><text x="6.8163%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="6.7871%" y="197" width="0.0201%" height="15" fill="rgb(241,131,45)" fg:x="338" fg:w="1"/><text x="7.0371%" y="207.50"></text></g><g><title>trx`__rust_realloc (2 samples, 0.04%)</title><rect x="6.8072%" y="197" width="0.0402%" height="15" fill="rgb(249,31,29)" fg:x="339" fg:w="2"/><text x="7.0572%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.08%)</title><rect x="6.9478%" y="181" width="0.0803%" height="15" fill="rgb(225,111,53)" fg:x="346" fg:w="4"/><text x="7.1978%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="7.3293%" y="165" width="0.0201%" height="15" fill="rgb(238,160,17)" fg:x="365" fg:w="1"/><text x="7.5793%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.84%)</title><rect x="7.4297%" y="149" width="0.8434%" height="15" fill="rgb(214,148,48)" fg:x="370" fg:w="42"/><text x="7.6797%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="8.6546%" y="133" width="0.0402%" height="15" fill="rgb(232,36,49)" fg:x="431" fg:w="2"/><text x="8.9046%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (5 samples, 0.10%)</title><rect x="8.6948%" y="133" width="0.1004%" height="15" fill="rgb(209,103,24)" fg:x="433" fg:w="5"/><text x="8.9448%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.70%)</title><rect x="8.7952%" y="133" width="0.7028%" height="15" fill="rgb(229,88,8)" fg:x="438" fg:w="35"/><text x="9.0452%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (73 samples, 1.47%)</title><rect x="9.4980%" y="133" width="1.4659%" height="15" fill="rgb(213,181,19)" fg:x="473" fg:w="73"/><text x="9.7480%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (66 samples, 1.33%)</title><rect x="9.6386%" y="117" width="1.3253%" height="15" fill="rgb(254,191,54)" fg:x="480" fg:w="66"/><text x="9.8886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 0.80%)</title><rect x="10.1606%" y="101" width="0.8032%" height="15" fill="rgb(241,83,37)" fg:x="506" fg:w="40"/><text x="10.4106%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.52%)</title><rect x="10.9639%" y="133" width="0.5221%" height="15" fill="rgb(233,36,39)" fg:x="546" fg:w="26"/><text x="11.2139%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (166 samples, 3.33%)</title><rect x="8.2731%" y="149" width="3.3333%" height="15" fill="rgb(226,3,54)" fg:x="412" fg:w="166"/><text x="8.5231%" y="159.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.12%)</title><rect x="11.4859%" y="133" width="0.1205%" height="15" fill="rgb(245,192,40)" fg:x="572" fg:w="6"/><text x="11.7359%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="11.6064%" y="149" width="0.0201%" height="15" fill="rgb(238,167,29)" fg:x="578" fg:w="1"/><text x="11.8564%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (214 samples, 4.30%)</title><rect x="7.3494%" y="165" width="4.2972%" height="15" fill="rgb(232,182,51)" fg:x="366" fg:w="214"/><text x="7.5994%" y="175.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="11.6265%" y="149" width="0.0201%" height="15" fill="rgb(231,60,39)" fg:x="579" fg:w="1"/><text x="11.8765%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (31 samples, 0.62%)</title><rect x="11.6466%" y="165" width="0.6225%" height="15" fill="rgb(208,69,12)" fg:x="580" fg:w="31"/><text x="11.8966%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.04%)</title><rect x="12.2691%" y="165" width="0.0402%" height="15" fill="rgb(235,93,37)" fg:x="611" fg:w="2"/><text x="12.5191%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (265 samples, 5.32%)</title><rect x="7.0281%" y="181" width="5.3213%" height="15" fill="rgb(213,116,39)" fg:x="350" fg:w="265"/><text x="7.2781%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="12.3092%" y="165" width="0.0402%" height="15" fill="rgb(222,207,29)" fg:x="613" fg:w="2"/><text x="12.5592%" y="175.50"></text></g><g><title>trx`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (288 samples, 5.78%)</title><rect x="6.6667%" y="213" width="5.7831%" height="15" fill="rgb(206,96,30)" fg:x="332" fg:w="288"/><text x="6.9167%" y="223.50">trx`all..</text></g><g><title>trx`alloc::raw_vec::finish_grow (279 samples, 5.60%)</title><rect x="6.8474%" y="197" width="5.6024%" height="15" fill="rgb(218,138,4)" fg:x="341" fg:w="279"/><text x="7.0974%" y="207.50">trx`all..</text></g><g><title>trx`__rdl_realloc (5 samples, 0.10%)</title><rect x="12.3494%" y="181" width="0.1004%" height="15" fill="rgb(250,191,14)" fg:x="615" fg:w="5"/><text x="12.5994%" y="191.50"></text></g><g><title>trx`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="12.4498%" y="213" width="0.0201%" height="15" fill="rgb(239,60,40)" fg:x="620" fg:w="1"/><text x="12.6998%" y="223.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (4 samples, 0.08%)</title><rect x="12.4699%" y="213" width="0.0803%" height="15" fill="rgb(206,27,48)" fg:x="621" fg:w="4"/><text x="12.7199%" y="223.50"></text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (13 samples, 0.26%)</title><rect x="12.5502%" y="213" width="0.2610%" height="15" fill="rgb(225,35,8)" fg:x="625" fg:w="13"/><text x="12.8002%" y="223.50"></text></g><g><title>trx`csv::Trim::should_trim_fields (2 samples, 0.04%)</title><rect x="12.8112%" y="213" width="0.0402%" height="15" fill="rgb(250,213,24)" fg:x="638" fg:w="2"/><text x="13.0612%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.06%)</title><rect x="17.0683%" y="181" width="0.0602%" height="15" fill="rgb(247,123,22)" fg:x="850" fg:w="3"/><text x="17.3183%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (112 samples, 2.25%)</title><rect x="19.0562%" y="149" width="2.2490%" height="15" fill="rgb(231,138,38)" fg:x="949" fg:w="112"/><text x="19.3062%" y="159.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.20%)</title><rect x="21.3052%" y="149" width="0.2008%" height="15" fill="rgb(231,145,46)" fg:x="1061" fg:w="10"/><text x="21.5552%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (207 samples, 4.16%)</title><rect x="17.3896%" y="165" width="4.1566%" height="15" fill="rgb(251,118,11)" fg:x="866" fg:w="207"/><text x="17.6396%" y="175.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="21.5060%" y="149" width="0.0402%" height="15" fill="rgb(217,147,25)" fg:x="1071" fg:w="2"/><text x="21.7560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="21.5462%" y="165" width="0.0201%" height="15" fill="rgb(247,81,37)" fg:x="1073" fg:w="1"/><text x="21.7962%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="21.5663%" y="165" width="0.0201%" height="15" fill="rgb(209,12,38)" fg:x="1074" fg:w="1"/><text x="21.8163%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (247 samples, 4.96%)</title><rect x="16.6667%" y="197" width="4.9598%" height="15" fill="rgb(227,1,9)" fg:x="830" fg:w="247"/><text x="16.9167%" y="207.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (224 samples, 4.50%)</title><rect x="17.1285%" y="181" width="4.4980%" height="15" fill="rgb(248,47,43)" fg:x="853" fg:w="224"/><text x="17.3785%" y="191.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="21.5863%" y="165" width="0.0402%" height="15" fill="rgb(221,10,30)" fg:x="1075" fg:w="2"/><text x="21.8363%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="21.9277%" y="181" width="0.0201%" height="15" fill="rgb(210,229,1)" fg:x="1092" fg:w="1"/><text x="22.1777%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (127 samples, 2.55%)</title><rect x="21.6265%" y="197" width="2.5502%" height="15" fill="rgb(222,148,37)" fg:x="1077" fg:w="127"/><text x="21.8765%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (111 samples, 2.23%)</title><rect x="21.9478%" y="181" width="2.2289%" height="15" fill="rgb(234,67,33)" fg:x="1093" fg:w="111"/><text x="22.1978%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (104 samples, 2.09%)</title><rect x="22.0884%" y="165" width="2.0884%" height="15" fill="rgb(247,98,35)" fg:x="1100" fg:w="104"/><text x="22.3384%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (56 samples, 1.12%)</title><rect x="23.0522%" y="149" width="1.1245%" height="15" fill="rgb(247,138,52)" fg:x="1148" fg:w="56"/><text x="23.3022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (5 samples, 0.10%)</title><rect x="24.1767%" y="197" width="0.1004%" height="15" fill="rgb(213,79,30)" fg:x="1204" fg:w="5"/><text x="24.4267%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.06%)</title><rect x="24.2771%" y="197" width="0.0602%" height="15" fill="rgb(246,177,23)" fg:x="1209" fg:w="3"/><text x="24.5271%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (154 samples, 3.09%)</title><rect x="25.4618%" y="181" width="3.0924%" height="15" fill="rgb(230,62,27)" fg:x="1268" fg:w="154"/><text x="25.7118%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (221 samples, 4.44%)</title><rect x="24.3373%" y="197" width="4.4378%" height="15" fill="rgb(216,154,8)" fg:x="1212" fg:w="221"/><text x="24.5873%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.22%)</title><rect x="28.5542%" y="181" width="0.2209%" height="15" fill="rgb(244,35,45)" fg:x="1422" fg:w="11"/><text x="28.8042%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.02%)</title><rect x="28.7751%" y="197" width="0.0201%" height="15" fill="rgb(251,115,12)" fg:x="1433" fg:w="1"/><text x="29.0251%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (31 samples, 0.62%)</title><rect x="28.7952%" y="197" width="0.6225%" height="15" fill="rgb(240,54,50)" fg:x="1434" fg:w="31"/><text x="29.0452%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (219 samples, 4.40%)</title><rect x="29.4177%" y="197" width="4.3976%" height="15" fill="rgb(233,84,52)" fg:x="1465" fg:w="219"/><text x="29.6677%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.22%)</title><rect x="33.8153%" y="197" width="0.2209%" height="15" fill="rgb(207,117,47)" fg:x="1684" fg:w="11"/><text x="34.0653%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (53 samples, 1.06%)</title><rect x="34.0361%" y="197" width="1.0643%" height="15" fill="rgb(249,43,39)" fg:x="1695" fg:w="53"/><text x="34.2861%" y="207.50"></text></g><g><title>trx`__rdl_alloc_zeroed (8 samples, 0.16%)</title><rect x="35.1004%" y="197" width="0.1606%" height="15" fill="rgb(209,38,44)" fg:x="1748" fg:w="8"/><text x="35.3504%" y="207.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_fwd (95 samples, 1.91%)</title><rect x="35.2610%" y="197" width="1.9076%" height="15" fill="rgb(236,212,23)" fg:x="1756" fg:w="95"/><text x="35.5110%" y="207.50">t..</text></g><g><title>trx`csv::byte_record::ByteRecord::trim (1,309 samples, 26.29%)</title><rect x="12.8514%" y="213" width="26.2851%" height="15" fill="rgb(242,79,21)" fg:x="640" fg:w="1309"/><text x="13.1014%" y="223.50">trx`csv::byte_record::ByteRecord::trim</text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (98 samples, 1.97%)</title><rect x="37.1687%" y="197" width="1.9679%" height="15" fill="rgb(211,96,35)" fg:x="1851" fg:w="98"/><text x="37.4187%" y="207.50">t..</text></g><g><title>trx`regex_automata::dfa::DFA::rfind_at (42 samples, 0.84%)</title><rect x="38.2932%" y="181" width="0.8434%" height="15" fill="rgb(253,215,40)" fg:x="1907" fg:w="42"/><text x="38.5432%" y="191.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::validate (17 samples, 0.34%)</title><rect x="39.1365%" y="213" width="0.3414%" height="15" fill="rgb(211,81,21)" fg:x="1949" fg:w="17"/><text x="39.3865%" y="223.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.02%)</title><rect x="40.6225%" y="197" width="0.0201%" height="15" fill="rgb(208,190,38)" fg:x="2023" fg:w="1"/><text x="40.8725%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="43.2329%" y="165" width="0.0201%" height="15" fill="rgb(235,213,38)" fg:x="2153" fg:w="1"/><text x="43.4829%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.04%)</title><rect x="43.2530%" y="165" width="0.0402%" height="15" fill="rgb(237,122,38)" fg:x="2154" fg:w="2"/><text x="43.5030%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.10%)</title><rect x="43.2932%" y="165" width="0.1004%" height="15" fill="rgb(244,218,35)" fg:x="2156" fg:w="5"/><text x="43.5432%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.04%)</title><rect x="43.3936%" y="165" width="0.0402%" height="15" fill="rgb(240,68,47)" fg:x="2161" fg:w="2"/><text x="43.6436%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="43.4337%" y="165" width="0.0402%" height="15" fill="rgb(210,16,53)" fg:x="2163" fg:w="2"/><text x="43.6837%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.04%)</title><rect x="43.4739%" y="165" width="0.0402%" height="15" fill="rgb(235,124,12)" fg:x="2165" fg:w="2"/><text x="43.7239%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="43.5141%" y="165" width="0.0201%" height="15" fill="rgb(224,169,11)" fg:x="2167" fg:w="1"/><text x="43.7641%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (113 samples, 2.27%)</title><rect x="44.8594%" y="117" width="2.2691%" height="15" fill="rgb(250,166,2)" fg:x="2234" fg:w="113"/><text x="45.1094%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (53 samples, 1.06%)</title><rect x="46.0643%" y="101" width="1.0643%" height="15" fill="rgb(242,216,29)" fg:x="2294" fg:w="53"/><text x="46.3143%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (140 samples, 2.81%)</title><rect x="44.3574%" y="149" width="2.8112%" height="15" fill="rgb(230,116,27)" fg:x="2209" fg:w="140"/><text x="44.6074%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (118 samples, 2.37%)</title><rect x="44.7992%" y="133" width="2.3695%" height="15" fill="rgb(228,99,48)" fg:x="2231" fg:w="118"/><text x="45.0492%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="47.1285%" y="117" width="0.0402%" height="15" fill="rgb(253,11,6)" fg:x="2347" fg:w="2"/><text x="47.3785%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (58 samples, 1.16%)</title><rect x="47.4096%" y="133" width="1.1647%" height="15" fill="rgb(247,143,39)" fg:x="2361" fg:w="58"/><text x="47.6596%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (71 samples, 1.43%)</title><rect x="47.1687%" y="149" width="1.4257%" height="15" fill="rgb(236,97,10)" fg:x="2349" fg:w="71"/><text x="47.4187%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="48.5743%" y="133" width="0.0201%" height="15" fill="rgb(233,208,19)" fg:x="2419" fg:w="1"/><text x="48.8243%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.18%)</title><rect x="48.5944%" y="149" width="0.1807%" height="15" fill="rgb(216,164,2)" fg:x="2420" fg:w="9"/><text x="48.8444%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (43 samples, 0.86%)</title><rect x="48.7751%" y="149" width="0.8635%" height="15" fill="rgb(220,129,5)" fg:x="2429" fg:w="43"/><text x="49.0251%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="49.6386%" y="149" width="0.0201%" height="15" fill="rgb(242,17,10)" fg:x="2472" fg:w="1"/><text x="49.8886%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.10%)</title><rect x="49.6586%" y="149" width="0.1004%" height="15" fill="rgb(242,107,0)" fg:x="2473" fg:w="5"/><text x="49.9086%" y="159.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (31 samples, 0.62%)</title><rect x="50.1807%" y="117" width="0.6225%" height="15" fill="rgb(251,28,31)" fg:x="2499" fg:w="31"/><text x="50.4307%" y="127.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (46 samples, 0.92%)</title><rect x="49.9598%" y="133" width="0.9237%" height="15" fill="rgb(233,223,10)" fg:x="2488" fg:w="46"/><text x="50.2098%" y="143.50"></text></g><g><title>trx`rust_decimal::str::handle_point (4 samples, 0.08%)</title><rect x="50.8032%" y="117" width="0.0803%" height="15" fill="rgb(215,21,27)" fg:x="2530" fg:w="4"/><text x="51.0532%" y="127.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::from_str_exact (57 samples, 1.14%)</title><rect x="49.7590%" y="149" width="1.1446%" height="15" fill="rgb(232,23,21)" fg:x="2478" fg:w="57"/><text x="50.0090%" y="159.50"></text></g><g><title>trx`rust_decimal::str::handle_point (1 samples, 0.02%)</title><rect x="50.8835%" y="133" width="0.0201%" height="15" fill="rgb(244,5,23)" fg:x="2534" fg:w="1"/><text x="51.1335%" y="143.50"></text></g><g><title>trx`&lt;lib::amount::Amount as serde::de::Deserialize&gt;::deserialize (608 samples, 12.21%)</title><rect x="43.5341%" y="165" width="12.2088%" height="15" fill="rgb(226,81,46)" fg:x="2168" fg:w="608"/><text x="43.7841%" y="175.50">trx`&lt;lib::amount::..</text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp (241 samples, 4.84%)</title><rect x="50.9036%" y="149" width="4.8394%" height="15" fill="rgb(247,70,30)" fg:x="2535" fg:w="241"/><text x="51.1536%" y="159.50">trx`ru..</text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp_with_strategy (239 samples, 4.80%)</title><rect x="50.9438%" y="133" width="4.7992%" height="15" fill="rgb(212,68,19)" fg:x="2537" fg:w="239"/><text x="51.1938%" y="143.50">trx`ru..</text></g><g><title>trx`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="55.7430%" y="165" width="0.0201%" height="15" fill="rgb(240,187,13)" fg:x="2776" fg:w="1"/><text x="55.9930%" y="175.50"></text></g><g><title>trx`__rdl_alloc (3 samples, 0.06%)</title><rect x="55.7631%" y="165" width="0.0602%" height="15" fill="rgb(223,113,26)" fg:x="2777" fg:w="3"/><text x="56.0131%" y="175.50"></text></g><g><title>trx`__rdl_dealloc (1 samples, 0.02%)</title><rect x="55.8233%" y="165" width="0.0201%" height="15" fill="rgb(206,192,2)" fg:x="2780" fg:w="1"/><text x="56.0733%" y="175.50"></text></g><g><title>trx`__rust_alloc (2 samples, 0.04%)</title><rect x="55.8434%" y="165" width="0.0402%" height="15" fill="rgb(241,108,4)" fg:x="2781" fg:w="2"/><text x="56.0934%" y="175.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (656 samples, 13.17%)</title><rect x="42.7510%" y="181" width="13.1727%" height="15" fill="rgb(247,173,49)" fg:x="2129" fg:w="656"/><text x="43.0010%" y="191.50">trx`&lt;&amp;mut csv::deser..</text></g><g><title>trx`rust_decimal::decimal::Decimal::from_str_exact (2 samples, 0.04%)</title><rect x="55.8835%" y="165" width="0.0402%" height="15" fill="rgb(224,114,35)" fg:x="2783" fg:w="2"/><text x="56.1335%" y="175.50"></text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u16&gt;::from_str (26 samples, 0.52%)</title><rect x="56.8675%" y="165" width="0.5221%" height="15" fill="rgb(245,159,27)" fg:x="2832" fg:w="26"/><text x="57.1175%" y="175.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (104 samples, 2.09%)</title><rect x="55.9237%" y="181" width="2.0884%" height="15" fill="rgb(245,172,44)" fg:x="2785" fg:w="104"/><text x="56.1737%" y="191.50">t..</text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (31 samples, 0.62%)</title><rect x="57.3896%" y="165" width="0.6225%" height="15" fill="rgb(236,23,11)" fg:x="2858" fg:w="31"/><text x="57.6396%" y="175.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (28 samples, 0.56%)</title><rect x="58.0120%" y="181" width="0.5622%" height="15" fill="rgb(205,117,38)" fg:x="2889" fg:w="28"/><text x="58.2620%" y="191.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (40 samples, 0.80%)</title><rect x="58.7550%" y="165" width="0.8032%" height="15" fill="rgb(237,72,25)" fg:x="2926" fg:w="40"/><text x="59.0050%" y="175.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (22 samples, 0.44%)</title><rect x="59.1165%" y="149" width="0.4418%" height="15" fill="rgb(244,70,9)" fg:x="2944" fg:w="22"/><text x="59.3665%" y="159.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (50 samples, 1.00%)</title><rect x="58.5743%" y="181" width="1.0040%" height="15" fill="rgb(217,125,39)" fg:x="2917" fg:w="50"/><text x="58.8243%" y="191.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect x="59.5582%" y="165" width="0.0201%" height="15" fill="rgb(235,36,10)" fg:x="2966" fg:w="1"/><text x="59.8082%" y="175.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (945 samples, 18.98%)</title><rect x="40.6426%" y="197" width="18.9759%" height="15" fill="rgb(251,123,47)" fg:x="2024" fg:w="945"/><text x="40.8926%" y="207.50">trx`&lt;&amp;mut csv::deserializer::D..</text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (2 samples, 0.04%)</title><rect x="59.5783%" y="181" width="0.0402%" height="15" fill="rgb(221,13,13)" fg:x="2967" fg:w="2"/><text x="59.8283%" y="191.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect x="59.6185%" y="197" width="0.0201%" height="15" fill="rgb(238,131,9)" fg:x="2969" fg:w="1"/><text x="59.8685%" y="207.50"></text></g><g><title>trx`csv::deserializer::deserialize_string_record (1,010 samples, 20.28%)</title><rect x="39.4779%" y="213" width="20.2811%" height="15" fill="rgb(211,50,8)" fg:x="1966" fg:w="1010"/><text x="39.7279%" y="223.50">trx`csv::deserializer::deseriali..</text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (6 samples, 0.12%)</title><rect x="59.6386%" y="197" width="0.1205%" height="15" fill="rgb(245,182,24)" fg:x="2970" fg:w="6"/><text x="59.8886%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="64.7189%" y="165" width="0.0201%" height="15" fill="rgb(242,14,37)" fg:x="3223" fg:w="1"/><text x="64.9689%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (120 samples, 2.41%)</title><rect x="66.7671%" y="149" width="2.4096%" height="15" fill="rgb(246,228,12)" fg:x="3325" fg:w="120"/><text x="67.0171%" y="159.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (16 samples, 0.32%)</title><rect x="69.1767%" y="149" width="0.3213%" height="15" fill="rgb(213,55,15)" fg:x="3445" fg:w="16"/><text x="69.4267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (238 samples, 4.78%)</title><rect x="64.7390%" y="165" width="4.7791%" height="15" fill="rgb(209,9,3)" fg:x="3224" fg:w="238"/><text x="64.9890%" y="175.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="69.4980%" y="149" width="0.0201%" height="15" fill="rgb(230,59,30)" fg:x="3461" fg:w="1"/><text x="69.7480%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="69.5181%" y="165" width="0.0602%" height="15" fill="rgb(209,121,21)" fg:x="3462" fg:w="3"/><text x="69.7681%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (289 samples, 5.80%)</title><rect x="63.8755%" y="197" width="5.8032%" height="15" fill="rgb(220,109,13)" fg:x="3181" fg:w="289"/><text x="64.1255%" y="207.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (267 samples, 5.36%)</title><rect x="64.3173%" y="181" width="5.3614%" height="15" fill="rgb(232,18,1)" fg:x="3203" fg:w="267"/><text x="64.5673%" y="191.50">libsyst..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (5 samples, 0.10%)</title><rect x="69.5783%" y="165" width="0.1004%" height="15" fill="rgb(215,41,42)" fg:x="3465" fg:w="5"/><text x="69.8283%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="69.9598%" y="181" width="0.0201%" height="15" fill="rgb(224,123,36)" fg:x="3484" fg:w="1"/><text x="70.2098%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (102 samples, 2.05%)</title><rect x="70.1406%" y="165" width="2.0482%" height="15" fill="rgb(240,125,3)" fg:x="3493" fg:w="102"/><text x="70.3906%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (46 samples, 0.92%)</title><rect x="71.2651%" y="149" width="0.9237%" height="15" fill="rgb(205,98,50)" fg:x="3549" fg:w="46"/><text x="71.5151%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (127 samples, 2.55%)</title><rect x="69.6787%" y="197" width="2.5502%" height="15" fill="rgb(205,185,37)" fg:x="3470" fg:w="127"/><text x="69.9287%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (112 samples, 2.25%)</title><rect x="69.9799%" y="181" width="2.2490%" height="15" fill="rgb(238,207,15)" fg:x="3485" fg:w="112"/><text x="70.2299%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="72.1888%" y="165" width="0.0402%" height="15" fill="rgb(213,199,42)" fg:x="3595" fg:w="2"/><text x="72.4388%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (3 samples, 0.06%)</title><rect x="72.2289%" y="197" width="0.0602%" height="15" fill="rgb(235,201,11)" fg:x="3597" fg:w="3"/><text x="72.4789%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.06%)</title><rect x="72.2892%" y="197" width="0.0602%" height="15" fill="rgb(207,46,11)" fg:x="3600" fg:w="3"/><text x="72.5392%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (156 samples, 3.13%)</title><rect x="73.6345%" y="181" width="3.1325%" height="15" fill="rgb(241,35,35)" fg:x="3667" fg:w="156"/><text x="73.8845%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (231 samples, 4.64%)</title><rect x="72.3494%" y="197" width="4.6386%" height="15" fill="rgb(243,32,47)" fg:x="3603" fg:w="231"/><text x="72.5994%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.22%)</title><rect x="76.7671%" y="181" width="0.2209%" height="15" fill="rgb(247,202,23)" fg:x="3823" fg:w="11"/><text x="77.0171%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.02%)</title><rect x="76.9880%" y="197" width="0.0201%" height="15" fill="rgb(219,102,11)" fg:x="3834" fg:w="1"/><text x="77.2380%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.48%)</title><rect x="77.0080%" y="197" width="0.4819%" height="15" fill="rgb(243,110,44)" fg:x="3835" fg:w="24"/><text x="77.2580%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (193 samples, 3.88%)</title><rect x="77.4900%" y="197" width="3.8755%" height="15" fill="rgb(222,74,54)" fg:x="3859" fg:w="193"/><text x="77.7400%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.08%)</title><rect x="81.3655%" y="197" width="0.0803%" height="15" fill="rgb(216,99,12)" fg:x="4052" fg:w="4"/><text x="81.6155%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (63 samples, 1.27%)</title><rect x="81.4458%" y="197" width="1.2651%" height="15" fill="rgb(226,22,26)" fg:x="4056" fg:w="63"/><text x="81.6958%" y="207.50"></text></g><g><title>trx`__rdl_alloc_zeroed (10 samples, 0.20%)</title><rect x="82.7108%" y="197" width="0.2008%" height="15" fill="rgb(217,163,10)" fg:x="4119" fg:w="10"/><text x="82.9608%" y="207.50"></text></g><g><title>trx`csv::string_record::StringRecord::trim (1,237 samples, 24.84%)</title><rect x="59.7590%" y="213" width="24.8394%" height="15" fill="rgb(213,25,53)" fg:x="2976" fg:w="1237"/><text x="60.0090%" y="223.50">trx`csv::string_record::StringRecord::tr..</text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (84 samples, 1.69%)</title><rect x="82.9116%" y="197" width="1.6867%" height="15" fill="rgb(252,105,26)" fg:x="4129" fg:w="84"/><text x="83.1616%" y="207.50"></text></g><g><title>trx`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,458 samples, 89.52%)</title><rect x="0.2811%" y="229" width="89.5181%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="4458"/><text x="0.5311%" y="239.50">trx`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>trx`csv_core::reader::Reader::read_record (259 samples, 5.20%)</title><rect x="84.5984%" y="213" width="5.2008%" height="15" fill="rgb(229,68,48)" fg:x="4213" fg:w="259"/><text x="84.8484%" y="223.50">trx`cs..</text></g><g><title>trx`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.32%)</title><rect x="89.7992%" y="229" width="0.3213%" height="15" fill="rgb(252,8,32)" fg:x="4472" fg:w="16"/><text x="90.0492%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.32%)</title><rect x="89.7992%" y="213" width="0.3213%" height="15" fill="rgb(223,20,43)" fg:x="4472" fg:w="16"/><text x="90.0492%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.32%)</title><rect x="89.7992%" y="197" width="0.3213%" height="15" fill="rgb(229,81,49)" fg:x="4472" fg:w="16"/><text x="90.0492%" y="207.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.04%)</title><rect x="91.8273%" y="213" width="0.0402%" height="15" fill="rgb(236,28,36)" fg:x="4573" fg:w="2"/><text x="92.0773%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="96.3454%" y="197" width="0.0201%" height="15" fill="rgb(249,185,26)" fg:x="4798" fg:w="1"/><text x="96.5954%" y="207.50"></text></g><g><title>trx`rust_decimal::ops::add::fast_add (1 samples, 0.02%)</title><rect x="96.5060%" y="181" width="0.0201%" height="15" fill="rgb(249,174,33)" fg:x="4806" fg:w="1"/><text x="96.7560%" y="191.50"></text></g><g><title>trx`&lt;lib::amount::Amount as core::ops::arith::SubAssign&gt;::sub_assign (12 samples, 0.24%)</title><rect x="96.3655%" y="197" width="0.2410%" height="15" fill="rgb(233,201,37)" fg:x="4799" fg:w="12"/><text x="96.6155%" y="207.50"></text></g><g><title>trx`rust_decimal::ops::add::sub_impl (4 samples, 0.08%)</title><rect x="96.5261%" y="181" width="0.0803%" height="15" fill="rgb(221,78,26)" fg:x="4807" fg:w="4"/><text x="96.7761%" y="191.50"></text></g><g><title>trx`rust_decimal::ops::add::add_sub_internal (3 samples, 0.06%)</title><rect x="96.5462%" y="165" width="0.0602%" height="15" fill="rgb(250,127,30)" fg:x="4808" fg:w="3"/><text x="96.7962%" y="175.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (41 samples, 0.82%)</title><rect x="96.6064%" y="197" width="0.8233%" height="15" fill="rgb(230,49,44)" fg:x="4811" fg:w="41"/><text x="96.8564%" y="207.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.02%)</title><rect x="97.4297%" y="197" width="0.0201%" height="15" fill="rgb(229,67,23)" fg:x="4852" fg:w="1"/><text x="97.6797%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.06%)</title><rect x="99.0361%" y="181" width="0.0602%" height="15" fill="rgb(249,83,47)" fg:x="4932" fg:w="3"/><text x="99.2861%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.06%)</title><rect x="99.0361%" y="165" width="0.0602%" height="15" fill="rgb(215,43,3)" fg:x="4932" fg:w="3"/><text x="99.2861%" y="175.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (88 samples, 1.77%)</title><rect x="97.4498%" y="197" width="1.7671%" height="15" fill="rgb(238,154,13)" fg:x="4853" fg:w="88"/><text x="97.6998%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.12%)</title><rect x="99.0964%" y="181" width="0.1205%" height="15" fill="rgb(219,56,2)" fg:x="4935" fg:w="6"/><text x="99.3464%" y="191.50"></text></g><g><title>trx`alloc::fmt::format (1 samples, 0.02%)</title><rect x="99.2169%" y="181" width="0.0201%" height="15" fill="rgb(233,0,4)" fg:x="4941" fg:w="1"/><text x="99.4669%" y="191.50"></text></g><g><title>trx`core::fmt::write (1 samples, 0.02%)</title><rect x="99.2169%" y="165" width="0.0201%" height="15" fill="rgb(235,30,7)" fg:x="4941" fg:w="1"/><text x="99.4669%" y="175.50"></text></g><g><title>trx`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="99.2169%" y="149" width="0.0201%" height="15" fill="rgb(250,79,13)" fg:x="4941" fg:w="1"/><text x="99.4669%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="99.2169%" y="133" width="0.0201%" height="15" fill="rgb(211,146,34)" fg:x="4941" fg:w="1"/><text x="99.4669%" y="143.50"></text></g><g><title>trx`color_eyre::config::lib_verbosity (1 samples, 0.02%)</title><rect x="99.2369%" y="133" width="0.0201%" height="15" fill="rgb(228,22,38)" fg:x="4942" fg:w="1"/><text x="99.4869%" y="143.50"></text></g><g><title>trx`std::env::_var (1 samples, 0.02%)</title><rect x="99.2369%" y="117" width="0.0201%" height="15" fill="rgb(235,168,5)" fg:x="4942" fg:w="1"/><text x="99.4869%" y="127.50"></text></g><g><title>trx`std::env::_var_os (1 samples, 0.02%)</title><rect x="99.2369%" y="101" width="0.0201%" height="15" fill="rgb(221,155,16)" fg:x="4942" fg:w="1"/><text x="99.4869%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_rwlock_rdlock (1 samples, 0.02%)</title><rect x="99.2369%" y="85" width="0.0201%" height="15" fill="rgb(215,215,53)" fg:x="4942" fg:w="1"/><text x="99.4869%" y="95.50"></text></g><g><title>trx`lib::transaction::Transaction::transition (3 samples, 0.06%)</title><rect x="99.2169%" y="197" width="0.0602%" height="15" fill="rgb(223,4,10)" fg:x="4941" fg:w="3"/><text x="99.4669%" y="207.50"></text></g><g><title>trx`eyre::error::_&lt;impl eyre::Report&gt;::from_adhoc (2 samples, 0.04%)</title><rect x="99.2369%" y="181" width="0.0402%" height="15" fill="rgb(234,103,6)" fg:x="4942" fg:w="2"/><text x="99.4869%" y="191.50"></text></g><g><title>trx`eyre::capture_handler (2 samples, 0.04%)</title><rect x="99.2369%" y="165" width="0.0402%" height="15" fill="rgb(227,97,0)" fg:x="4942" fg:w="2"/><text x="99.4869%" y="175.50"></text></g><g><title>trx`color_eyre::config::EyreHook::into_eyre_hook::_{{closure}} (2 samples, 0.04%)</title><rect x="99.2369%" y="149" width="0.0402%" height="15" fill="rgb(234,150,53)" fg:x="4942" fg:w="2"/><text x="99.4869%" y="159.50"></text></g><g><title>trx`std::env::_var (1 samples, 0.02%)</title><rect x="99.2570%" y="133" width="0.0201%" height="15" fill="rgb(228,201,54)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="143.50"></text></g><g><title>trx`std::env::_var_os (1 samples, 0.02%)</title><rect x="99.2570%" y="117" width="0.0201%" height="15" fill="rgb(222,22,37)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="127.50"></text></g><g><title>trx`&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.02%)</title><rect x="99.2570%" y="101" width="0.0201%" height="15" fill="rgb(237,53,32)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.2570%" y="85" width="0.0201%" height="15" fill="rgb(233,25,53)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.2570%" y="69" width="0.0201%" height="15" fill="rgb(210,40,34)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="99.2570%" y="53" width="0.0201%" height="15" fill="rgb(241,220,44)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="99.2570%" y="37" width="0.0201%" height="15" fill="rgb(235,28,35)" fg:x="4943" fg:w="1"/><text x="99.5070%" y="47.50"></text></g><g><title>trx`rust_decimal::ops::add::add_sub_internal (6 samples, 0.12%)</title><rect x="99.4177%" y="181" width="0.1205%" height="15" fill="rgb(210,56,17)" fg:x="4951" fg:w="6"/><text x="99.6677%" y="191.50"></text></g><g><title>trx`rust_decimal::ops::add::add_impl (14 samples, 0.28%)</title><rect x="99.2771%" y="197" width="0.2811%" height="15" fill="rgb(224,130,29)" fg:x="4944" fg:w="14"/><text x="99.5271%" y="207.50"></text></g><g><title>trx`rust_decimal::ops::add::fast_add (1 samples, 0.02%)</title><rect x="99.5382%" y="181" width="0.0201%" height="15" fill="rgb(235,212,8)" fg:x="4957" fg:w="1"/><text x="99.7882%" y="191.50"></text></g><g><title>trx`rust_decimal::ops::add::add_sub_internal (1 samples, 0.02%)</title><rect x="99.5582%" y="197" width="0.0201%" height="15" fill="rgb(223,33,50)" fg:x="4958" fg:w="1"/><text x="99.8082%" y="207.50"></text></g><g><title>trx`rust_decimal::ops::add::fast_add (1 samples, 0.02%)</title><rect x="99.5783%" y="197" width="0.0201%" height="15" fill="rgb(219,149,13)" fg:x="4959" fg:w="1"/><text x="99.8283%" y="207.50"></text></g><g><title>trx`&lt;lib::clients::synchronous::Clients as lib::clients::SyncClients&gt;::publish_transaction (480 samples, 9.64%)</title><rect x="90.1205%" y="229" width="9.6386%" height="15" fill="rgb(250,156,29)" fg:x="4488" fg:w="480"/><text x="90.3705%" y="239.50">trx`&lt;lib::clie..</text></g><g><title>trx`lib::client::Client::process_transaction (393 samples, 7.89%)</title><rect x="91.8675%" y="213" width="7.8916%" height="15" fill="rgb(216,193,19)" fg:x="4575" fg:w="393"/><text x="92.1175%" y="223.50">trx`lib::cl..</text></g><g><title>trx`rust_decimal::ops::cmp::cmp_impl (8 samples, 0.16%)</title><rect x="99.5984%" y="197" width="0.1606%" height="15" fill="rgb(216,135,14)" fg:x="4960" fg:w="8"/><text x="99.8484%" y="207.50"></text></g><g><title>trx`rust_decimal::ops::cmp::cmp_internal (1 samples, 0.02%)</title><rect x="99.7390%" y="181" width="0.0201%" height="15" fill="rgb(241,47,5)" fg:x="4967" fg:w="1"/><text x="99.9890%" y="191.50"></text></g><g><title>trx`DYLD-STUB$$__bzero (1 samples, 0.02%)</title><rect x="99.7590%" y="229" width="0.0201%" height="15" fill="rgb(233,42,35)" fg:x="4968" fg:w="1"/><text x="100.0090%" y="239.50"></text></g><g><title>trx`csv::Trim::should_trim_fields (2 samples, 0.04%)</title><rect x="99.7791%" y="229" width="0.0402%" height="15" fill="rgb(231,13,6)" fg:x="4969" fg:w="2"/><text x="100.0291%" y="239.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::validate (1 samples, 0.02%)</title><rect x="99.8193%" y="229" width="0.0201%" height="15" fill="rgb(207,181,40)" fg:x="4971" fg:w="1"/><text x="100.0693%" y="239.50"></text></g><g><title>trx`csv::deserializer::deserialize_string_record (1 samples, 0.02%)</title><rect x="99.8394%" y="229" width="0.0201%" height="15" fill="rgb(254,173,49)" fg:x="4972" fg:w="1"/><text x="100.0894%" y="239.50"></text></g><g><title>trx`csv::writer::Writer&lt;W&gt;::serialize (1 samples, 0.02%)</title><rect x="99.8594%" y="229" width="0.0201%" height="15" fill="rgb(221,1,38)" fg:x="4973" fg:w="1"/><text x="100.1094%" y="239.50"></text></g><g><title>trx`&lt;lib::client::Client as serde::ser::Serialize&gt;::serialize (1 samples, 0.02%)</title><rect x="99.8594%" y="213" width="0.0201%" height="15" fill="rgb(206,124,46)" fg:x="4973" fg:w="1"/><text x="100.1094%" y="223.50"></text></g><g><title>trx`ryu::pretty::format32 (1 samples, 0.02%)</title><rect x="99.8594%" y="197" width="0.0201%" height="15" fill="rgb(249,21,11)" fg:x="4973" fg:w="1"/><text x="100.1094%" y="207.50"></text></g><g><title>trx`csv_core::reader::Reader::line (1 samples, 0.02%)</title><rect x="99.8795%" y="229" width="0.0201%" height="15" fill="rgb(222,201,40)" fg:x="4974" fg:w="1"/><text x="100.1295%" y="239.50"></text></g><g><title>trx`csv_core::reader::Reader::read_record (4 samples, 0.08%)</title><rect x="99.8996%" y="229" width="0.0803%" height="15" fill="rgb(235,61,29)" fg:x="4975" fg:w="4"/><text x="100.1496%" y="239.50"></text></g><g><title>all (4,980 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="4980"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld`start (4,980 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="4980"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>trx`main (4,975 samples, 99.90%)</title><rect x="0.1004%" y="325" width="99.8996%" height="15" fill="rgb(239,76,54)" fg:x="5" fg:w="4975"/><text x="0.3504%" y="335.50">trx`main</text></g><g><title>trx`std::rt::lang_start_internal (4,975 samples, 99.90%)</title><rect x="0.1004%" y="309" width="99.8996%" height="15" fill="rgb(231,124,27)" fg:x="5" fg:w="4975"/><text x="0.3504%" y="319.50">trx`std::rt::lang_start_internal</text></g><g><title>trx`std::rt::lang_start::_{{closure}} (4,975 samples, 99.90%)</title><rect x="0.1004%" y="293" width="99.8996%" height="15" fill="rgb(249,195,6)" fg:x="5" fg:w="4975"/><text x="0.3504%" y="303.50">trx`std::rt::lang_start::_{{closure}}</text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (4,975 samples, 99.90%)</title><rect x="0.1004%" y="277" width="99.8996%" height="15" fill="rgb(237,174,47)" fg:x="5" fg:w="4975"/><text x="0.3504%" y="287.50">trx`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>trx`trx::main (4,975 samples, 99.90%)</title><rect x="0.1004%" y="261" width="99.8996%" height="15" fill="rgb(206,201,31)" fg:x="5" fg:w="4975"/><text x="0.3504%" y="271.50">trx`trx::main</text></g><g><title>trx`lib::run_sync (4,974 samples, 99.88%)</title><rect x="0.1205%" y="245" width="99.8795%" height="15" fill="rgb(231,57,52)" fg:x="6" fg:w="4974"/><text x="0.3705%" y="255.50">trx`lib::run_sync</text></g><g><title>trx`lib::client::Client::process_transaction (1 samples, 0.02%)</title><rect x="99.9799%" y="229" width="0.0201%" height="15" fill="rgb(248,177,22)" fg:x="4979" fg:w="1"/><text x="100.2299%" y="239.50"></text></g></svg></svg>