<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="17460"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (5 samples, 0.03%)</title><rect x="0.0000%" y="325" width="0.0286%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.03%)</title><rect x="0.0000%" y="309" width="0.0286%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.0286%" y="165" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="2"/><text x="0.2786%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="0.0401%" y="165" width="0.0286%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="5"/><text x="0.2901%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="0.0745%" y="165" width="0.0172%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="3"/><text x="0.3245%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (34 samples, 0.19%)</title><rect x="1.0653%" y="149" width="0.1947%" height="15" fill="rgb(232,128,0)" fg:x="186" fg:w="34"/><text x="1.3153%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.2600%" y="149" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="220" fg:w="2"/><text x="1.5100%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`calloc (13 samples, 0.07%)</title><rect x="1.2715%" y="149" width="0.0745%" height="15" fill="rgb(228,23,34)" fg:x="222" fg:w="13"/><text x="1.5215%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.05%)</title><rect x="1.3459%" y="149" width="0.0458%" height="15" fill="rgb(218,30,26)" fg:x="235" fg:w="8"/><text x="1.5959%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (38 samples, 0.22%)</title><rect x="1.6552%" y="133" width="0.2176%" height="15" fill="rgb(220,122,19)" fg:x="289" fg:w="38"/><text x="1.9052%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (87 samples, 0.50%)</title><rect x="1.3918%" y="149" width="0.4983%" height="15" fill="rgb(250,228,42)" fg:x="243" fg:w="87"/><text x="1.6418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="1.8729%" y="133" width="0.0172%" height="15" fill="rgb(240,193,28)" fg:x="327" fg:w="3"/><text x="2.1229%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="1.8900%" y="149" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="330" fg:w="2"/><text x="2.1400%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.07%)</title><rect x="1.9015%" y="149" width="0.0745%" height="15" fill="rgb(206,188,39)" fg:x="332" fg:w="13"/><text x="2.1515%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (53 samples, 0.30%)</title><rect x="1.9759%" y="149" width="0.3036%" height="15" fill="rgb(217,207,13)" fg:x="345" fg:w="53"/><text x="2.2259%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="2.2795%" y="149" width="0.0229%" height="15" fill="rgb(231,73,38)" fg:x="398" fg:w="4"/><text x="2.5295%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.06%)</title><rect x="2.3024%" y="149" width="0.0630%" height="15" fill="rgb(225,20,46)" fg:x="402" fg:w="11"/><text x="2.5524%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.06%)</title><rect x="2.3654%" y="149" width="0.0630%" height="15" fill="rgb(210,31,41)" fg:x="413" fg:w="11"/><text x="2.6154%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.15%)</title><rect x="2.4284%" y="149" width="0.1489%" height="15" fill="rgb(221,200,47)" fg:x="424" fg:w="26"/><text x="2.6784%" y="159.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.02%)</title><rect x="2.5773%" y="149" width="0.0172%" height="15" fill="rgb(226,26,5)" fg:x="450" fg:w="3"/><text x="2.8273%" y="159.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="2.9725%" y="133" width="0.0115%" height="15" fill="rgb(249,33,26)" fg:x="519" fg:w="2"/><text x="3.2225%" y="143.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="4.3242%" y="117" width="0.0401%" height="15" fill="rgb(235,183,28)" fg:x="755" fg:w="7"/><text x="4.5742%" y="127.50"></text></g><g><title>trx`tokio::runtime::task::raw::RawTask::from_raw (3 samples, 0.02%)</title><rect x="4.3643%" y="117" width="0.0172%" height="15" fill="rgb(221,5,38)" fg:x="762" fg:w="3"/><text x="4.6143%" y="127.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_dec (2 samples, 0.01%)</title><rect x="4.3814%" y="117" width="0.0115%" height="15" fill="rgb(247,18,42)" fg:x="765" fg:w="2"/><text x="4.6314%" y="127.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.02%)</title><rect x="4.3929%" y="117" width="0.0172%" height="15" fill="rgb(241,131,45)" fg:x="767" fg:w="3"/><text x="4.6429%" y="127.50"></text></g><g><title>trx`tokio::runtime::task::raw::RawTask::from_raw (2 samples, 0.01%)</title><rect x="4.4330%" y="101" width="0.0115%" height="15" fill="rgb(249,31,29)" fg:x="774" fg:w="2"/><text x="4.6830%" y="111.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_dec (34 samples, 0.19%)</title><rect x="4.4444%" y="101" width="0.1947%" height="15" fill="rgb(225,111,53)" fg:x="776" fg:w="34"/><text x="4.6944%" y="111.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_notified_by_val (50 samples, 0.29%)</title><rect x="4.6392%" y="101" width="0.2864%" height="15" fill="rgb(238,160,17)" fg:x="810" fg:w="50"/><text x="4.8892%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="4.9771%" y="85" width="0.0115%" height="15" fill="rgb(214,148,48)" fg:x="869" fg:w="2"/><text x="5.2271%" y="95.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Unparker as tokio::park::Unpark&gt;::unpark (37 samples, 0.21%)</title><rect x="4.9885%" y="85" width="0.2119%" height="15" fill="rgb(232,36,49)" fg:x="871" fg:w="37"/><text x="5.2385%" y="95.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.05%)</title><rect x="5.1546%" y="69" width="0.0458%" height="15" fill="rgb(209,103,24)" fg:x="900" fg:w="8"/><text x="5.4046%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (7 samples, 0.04%)</title><rect x="5.1604%" y="53" width="0.0401%" height="15" fill="rgb(229,88,8)" fg:x="901" fg:w="7"/><text x="5.4104%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (267 samples, 1.53%)</title><rect x="5.3608%" y="69" width="1.5292%" height="15" fill="rgb(213,181,19)" fg:x="936" fg:w="267"/><text x="5.6108%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.03%)</title><rect x="6.8900%" y="69" width="0.0286%" height="15" fill="rgb(254,191,54)" fg:x="1203" fg:w="5"/><text x="7.1400%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.02%)</title><rect x="6.9187%" y="69" width="0.0172%" height="15" fill="rgb(241,83,37)" fg:x="1208" fg:w="3"/><text x="7.1687%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.02%)</title><rect x="6.9187%" y="53" width="0.0172%" height="15" fill="rgb(233,36,39)" fg:x="1208" fg:w="3"/><text x="7.1687%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (7 samples, 0.04%)</title><rect x="6.9359%" y="69" width="0.0401%" height="15" fill="rgb(226,3,54)" fg:x="1211" fg:w="7"/><text x="7.1859%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (21 samples, 0.12%)</title><rect x="6.9759%" y="69" width="0.1203%" height="15" fill="rgb(245,192,40)" fg:x="1218" fg:w="21"/><text x="7.2259%" y="79.50"></text></g><g><title>trx`parking_lot::condvar::Condvar::notify_one_slow (342 samples, 1.96%)</title><rect x="5.2005%" y="85" width="1.9588%" height="15" fill="rgb(238,167,29)" fg:x="908" fg:w="342"/><text x="5.4505%" y="95.50">t..</text></g><g><title>trx`parking_lot_core::parking_lot::lock_bucket_pair (10 samples, 0.06%)</title><rect x="7.1019%" y="69" width="0.0573%" height="15" fill="rgb(232,182,51)" fg:x="1240" fg:w="10"/><text x="7.3519%" y="79.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="7.2509%" y="69" width="0.0172%" height="15" fill="rgb(231,60,39)" fg:x="1266" fg:w="3"/><text x="7.5009%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (38 samples, 0.22%)</title><rect x="8.3849%" y="37" width="0.2176%" height="15" fill="rgb(208,69,12)" fg:x="1464" fg:w="38"/><text x="8.6349%" y="47.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (84 samples, 0.48%)</title><rect x="8.1271%" y="53" width="0.4811%" height="15" fill="rgb(235,93,37)" fg:x="1419" fg:w="84"/><text x="8.3771%" y="63.50"></text></g><g><title>trx`tokio::runtime::task::inject::Inject&lt;T&gt;::push (236 samples, 1.35%)</title><rect x="7.2680%" y="69" width="1.3517%" height="15" fill="rgb(213,116,39)" fg:x="1269" fg:w="236"/><text x="7.5180%" y="79.50"></text></g><g><title>trx`std::thread::yield_now (2 samples, 0.01%)</title><rect x="8.6082%" y="53" width="0.0115%" height="15" fill="rgb(222,207,29)" fg:x="1503" fg:w="2"/><text x="8.8582%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (12 samples, 0.07%)</title><rect x="9.3414%" y="37" width="0.0687%" height="15" fill="rgb(206,96,30)" fg:x="1631" fg:w="12"/><text x="9.5914%" y="47.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (139 samples, 0.80%)</title><rect x="8.6197%" y="69" width="0.7961%" height="15" fill="rgb(218,138,4)" fg:x="1505" fg:w="139"/><text x="8.8697%" y="79.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (20 samples, 0.11%)</title><rect x="9.3013%" y="53" width="0.1145%" height="15" fill="rgb(250,191,14)" fg:x="1624" fg:w="20"/><text x="9.5513%" y="63.50"></text></g><g><title>trx`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (394 samples, 2.26%)</title><rect x="7.1649%" y="85" width="2.2566%" height="15" fill="rgb(239,60,40)" fg:x="1251" fg:w="394"/><text x="7.4149%" y="95.50">t..</text></g><g><title>trx`tokio::runtime::task::waker::wake_by_val (876 samples, 5.02%)</title><rect x="4.4101%" y="117" width="5.0172%" height="15" fill="rgb(206,27,48)" fg:x="770" fg:w="876"/><text x="4.6601%" y="127.50">trx`to..</text></g><g><title>trx`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::schedule (786 samples, 4.50%)</title><rect x="4.9255%" y="101" width="4.5017%" height="15" fill="rgb(225,35,8)" fg:x="860" fg:w="786"/><text x="5.1755%" y="111.50">trx`t..</text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="10.8534%" y="101" width="0.0286%" height="15" fill="rgb(250,213,24)" fg:x="1895" fg:w="5"/><text x="11.1034%" y="111.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (271 samples, 1.55%)</title><rect x="9.4330%" y="117" width="1.5521%" height="15" fill="rgb(247,123,22)" fg:x="1647" fg:w="271"/><text x="9.6830%" y="127.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (18 samples, 0.10%)</title><rect x="10.8820%" y="101" width="0.1031%" height="15" fill="rgb(231,138,38)" fg:x="1900" fg:w="18"/><text x="11.1320%" y="111.50"></text></g><g><title>trx`tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (1,474 samples, 8.44%)</title><rect x="2.9897%" y="133" width="8.4422%" height="15" fill="rgb(231,145,46)" fg:x="522" fg:w="1474"/><text x="3.2397%" y="143.50">trx`tokio::s..</text></g><g><title>trx`tokio::sync::task::atomic_waker::AtomicWaker::wake (78 samples, 0.45%)</title><rect x="10.9851%" y="117" width="0.4467%" height="15" fill="rgb(251,118,11)" fg:x="1918" fg:w="78"/><text x="11.2351%" y="127.50"></text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,544 samples, 8.84%)</title><rect x="2.5945%" y="149" width="8.8431%" height="15" fill="rgb(217,147,25)" fg:x="453" fg:w="1544"/><text x="2.8445%" y="159.50">trx`&lt;core::f..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (118 samples, 0.68%)</title><rect x="11.5979%" y="101" width="0.6758%" height="15" fill="rgb(247,81,37)" fg:x="2025" fg:w="118"/><text x="11.8479%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (62 samples, 0.36%)</title><rect x="11.9187%" y="85" width="0.3551%" height="15" fill="rgb(209,12,38)" fg:x="2081" fg:w="62"/><text x="12.1687%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (138 samples, 0.79%)</title><rect x="11.4891%" y="133" width="0.7904%" height="15" fill="rgb(227,1,9)" fg:x="2006" fg:w="138"/><text x="11.7391%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (125 samples, 0.72%)</title><rect x="11.5636%" y="117" width="0.7159%" height="15" fill="rgb(248,47,43)" fg:x="2019" fg:w="125"/><text x="11.8136%" y="127.50"></text></g><g><title>trx`&lt;lib::clients::actor_like::Clients as lib::clients::AsyncClients&gt;::publish_transaction (148 samples, 0.85%)</title><rect x="11.4433%" y="149" width="0.8477%" height="15" fill="rgb(221,10,30)" fg:x="1998" fg:w="148"/><text x="11.6933%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="12.2795%" y="133" width="0.0115%" height="15" fill="rgb(210,229,1)" fg:x="2144" fg:w="2"/><text x="12.5295%" y="143.50"></text></g><g><title>trx`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="12.2910%" y="149" width="0.0172%" height="15" fill="rgb(222,148,37)" fg:x="2146" fg:w="3"/><text x="12.5410%" y="159.50"></text></g><g><title>trx`__rdl_alloc (7 samples, 0.04%)</title><rect x="12.3081%" y="149" width="0.0401%" height="15" fill="rgb(234,67,33)" fg:x="2149" fg:w="7"/><text x="12.5581%" y="159.50"></text></g><g><title>trx`__rdl_alloc_zeroed (12 samples, 0.07%)</title><rect x="12.3482%" y="149" width="0.0687%" height="15" fill="rgb(247,98,35)" fg:x="2156" fg:w="12"/><text x="12.5982%" y="159.50"></text></g><g><title>trx`__rdl_dealloc (10 samples, 0.06%)</title><rect x="12.4170%" y="149" width="0.0573%" height="15" fill="rgb(247,138,52)" fg:x="2168" fg:w="10"/><text x="12.6670%" y="159.50"></text></g><g><title>trx`__rust_alloc (3 samples, 0.02%)</title><rect x="12.4742%" y="149" width="0.0172%" height="15" fill="rgb(213,79,30)" fg:x="2178" fg:w="3"/><text x="12.7242%" y="159.50"></text></g><g><title>trx`__rust_alloc_zeroed (8 samples, 0.05%)</title><rect x="12.4914%" y="149" width="0.0458%" height="15" fill="rgb(246,177,23)" fg:x="2181" fg:w="8"/><text x="12.7414%" y="159.50"></text></g><g><title>trx`__rust_dealloc (5 samples, 0.03%)</title><rect x="12.5372%" y="149" width="0.0286%" height="15" fill="rgb(230,62,27)" fg:x="2189" fg:w="5"/><text x="12.7872%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.02%)</title><rect x="12.6346%" y="117" width="0.0172%" height="15" fill="rgb(216,154,8)" fg:x="2206" fg:w="3"/><text x="12.8846%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="12.6518%" y="117" width="0.0172%" height="15" fill="rgb(244,35,45)" fg:x="2209" fg:w="3"/><text x="12.9018%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.01%)</title><rect x="12.7090%" y="101" width="0.0115%" height="15" fill="rgb(251,115,12)" fg:x="2219" fg:w="2"/><text x="12.9590%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (33 samples, 0.19%)</title><rect x="12.7778%" y="85" width="0.1890%" height="15" fill="rgb(240,54,50)" fg:x="2231" fg:w="33"/><text x="13.0278%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="13.0699%" y="69" width="0.0172%" height="15" fill="rgb(233,84,52)" fg:x="2282" fg:w="3"/><text x="13.3199%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (6 samples, 0.03%)</title><rect x="13.0871%" y="69" width="0.0344%" height="15" fill="rgb(207,117,47)" fg:x="2285" fg:w="6"/><text x="13.3371%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (38 samples, 0.22%)</title><rect x="13.1214%" y="69" width="0.2176%" height="15" fill="rgb(249,43,39)" fg:x="2291" fg:w="38"/><text x="13.3714%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (104 samples, 0.60%)</title><rect x="13.3792%" y="53" width="0.5956%" height="15" fill="rgb(209,38,44)" fg:x="2336" fg:w="104"/><text x="13.6292%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (60 samples, 0.34%)</title><rect x="13.6312%" y="37" width="0.3436%" height="15" fill="rgb(236,212,23)" fg:x="2380" fg:w="60"/><text x="13.8812%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (112 samples, 0.64%)</title><rect x="13.3391%" y="69" width="0.6415%" height="15" fill="rgb(242,79,21)" fg:x="2329" fg:w="112"/><text x="13.5891%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.12%)</title><rect x="13.9805%" y="69" width="0.1203%" height="15" fill="rgb(211,96,35)" fg:x="2441" fg:w="21"/><text x="14.2305%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (201 samples, 1.15%)</title><rect x="12.9668%" y="85" width="1.1512%" height="15" fill="rgb(253,215,40)" fg:x="2264" fg:w="201"/><text x="13.2168%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="14.1008%" y="69" width="0.0172%" height="15" fill="rgb(211,81,21)" fg:x="2462" fg:w="3"/><text x="14.3508%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (248 samples, 1.42%)</title><rect x="12.7205%" y="101" width="1.4204%" height="15" fill="rgb(208,190,38)" fg:x="2221" fg:w="248"/><text x="12.9705%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="14.1237%" y="85" width="0.0172%" height="15" fill="rgb(235,213,38)" fg:x="2466" fg:w="3"/><text x="14.3737%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (40 samples, 0.23%)</title><rect x="14.1409%" y="101" width="0.2291%" height="15" fill="rgb(237,122,38)" fg:x="2469" fg:w="40"/><text x="14.3909%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (301 samples, 1.72%)</title><rect x="12.6690%" y="117" width="1.7239%" height="15" fill="rgb(244,218,35)" fg:x="2212" fg:w="301"/><text x="12.9190%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="14.3700%" y="101" width="0.0229%" height="15" fill="rgb(240,68,47)" fg:x="2509" fg:w="4"/><text x="14.6200%" y="111.50"></text></g><g><title>trx`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (323 samples, 1.85%)</title><rect x="12.5659%" y="149" width="1.8499%" height="15" fill="rgb(210,16,53)" fg:x="2194" fg:w="323"/><text x="12.8159%" y="159.50">t..</text></g><g><title>trx`alloc::raw_vec::finish_grow (317 samples, 1.82%)</title><rect x="12.6002%" y="133" width="1.8156%" height="15" fill="rgb(235,124,12)" fg:x="2200" fg:w="317"/><text x="12.8502%" y="143.50">t..</text></g><g><title>trx`__rdl_realloc (4 samples, 0.02%)</title><rect x="14.3929%" y="117" width="0.0229%" height="15" fill="rgb(224,169,11)" fg:x="2513" fg:w="4"/><text x="14.6429%" y="127.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_fwd (2 samples, 0.01%)</title><rect x="14.4158%" y="149" width="0.0115%" height="15" fill="rgb(250,166,2)" fg:x="2517" fg:w="2"/><text x="14.6658%" y="159.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (5 samples, 0.03%)</title><rect x="14.4273%" y="149" width="0.0286%" height="15" fill="rgb(242,216,29)" fg:x="2519" fg:w="5"/><text x="14.6773%" y="159.50"></text></g><g><title>trx`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;lib::clients::actor_like::Clients as lib::clients::AsyncClients&gt;::publish_transaction::{{closure}}&gt;&gt; (4 samples, 0.02%)</title><rect x="14.4559%" y="149" width="0.0229%" height="15" fill="rgb(230,116,27)" fg:x="2524" fg:w="4"/><text x="14.7059%" y="159.50"></text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (12 samples, 0.07%)</title><rect x="14.4788%" y="149" width="0.0687%" height="15" fill="rgb(228,99,48)" fg:x="2528" fg:w="12"/><text x="14.7288%" y="159.50"></text></g><g><title>trx`csv::Trim::should_trim_fields (10 samples, 0.06%)</title><rect x="14.5475%" y="149" width="0.0573%" height="15" fill="rgb(253,11,6)" fg:x="2540" fg:w="10"/><text x="14.7975%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (125 samples, 0.72%)</title><rect x="16.5693%" y="85" width="0.7159%" height="15" fill="rgb(247,143,39)" fg:x="2893" fg:w="125"/><text x="16.8193%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.07%)</title><rect x="17.2852%" y="85" width="0.0745%" height="15" fill="rgb(236,97,10)" fg:x="3018" fg:w="13"/><text x="17.5352%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (246 samples, 1.41%)</title><rect x="15.9679%" y="101" width="1.4089%" height="15" fill="rgb(233,208,19)" fg:x="2788" fg:w="246"/><text x="16.2179%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="17.3597%" y="85" width="0.0172%" height="15" fill="rgb(216,164,2)" fg:x="3031" fg:w="3"/><text x="17.6097%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="17.3769%" y="101" width="0.0172%" height="15" fill="rgb(220,129,5)" fg:x="3034" fg:w="3"/><text x="17.6269%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.01%)</title><rect x="17.3940%" y="101" width="0.0115%" height="15" fill="rgb(242,17,10)" fg:x="3037" fg:w="2"/><text x="17.6440%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (295 samples, 1.69%)</title><rect x="15.7274%" y="133" width="1.6896%" height="15" fill="rgb(242,107,0)" fg:x="2746" fg:w="295"/><text x="15.9774%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (266 samples, 1.52%)</title><rect x="15.8935%" y="117" width="1.5235%" height="15" fill="rgb(251,28,31)" fg:x="2775" fg:w="266"/><text x="16.1435%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="17.4055%" y="101" width="0.0115%" height="15" fill="rgb(233,223,10)" fg:x="3039" fg:w="2"/><text x="17.6555%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.66%)</title><rect x="17.5487%" y="101" width="0.6586%" height="15" fill="rgb(215,21,27)" fg:x="3064" fg:w="115"/><text x="17.7987%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.35%)</title><rect x="17.8580%" y="85" width="0.3494%" height="15" fill="rgb(232,23,21)" fg:x="3118" fg:w="61"/><text x="18.1080%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (139 samples, 0.80%)</title><rect x="17.4170%" y="133" width="0.7961%" height="15" fill="rgb(244,5,23)" fg:x="3041" fg:w="139"/><text x="17.6670%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (126 samples, 0.72%)</title><rect x="17.4914%" y="117" width="0.7216%" height="15" fill="rgb(226,81,46)" fg:x="3054" fg:w="126"/><text x="17.7414%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (5 samples, 0.03%)</title><rect x="18.2131%" y="133" width="0.0286%" height="15" fill="rgb(247,70,30)" fg:x="3180" fg:w="5"/><text x="18.4631%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="18.2417%" y="133" width="0.0172%" height="15" fill="rgb(212,68,19)" fg:x="3185" fg:w="3"/><text x="18.4917%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (149 samples, 0.85%)</title><rect x="18.5968%" y="117" width="0.8534%" height="15" fill="rgb(240,187,13)" fg:x="3247" fg:w="149"/><text x="18.8468%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (219 samples, 1.25%)</title><rect x="18.2589%" y="133" width="1.2543%" height="15" fill="rgb(223,113,26)" fg:x="3188" fg:w="219"/><text x="18.5089%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.06%)</title><rect x="19.4502%" y="117" width="0.0630%" height="15" fill="rgb(206,192,2)" fg:x="3396" fg:w="11"/><text x="19.7002%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.03%)</title><rect x="19.5132%" y="133" width="0.0286%" height="15" fill="rgb(241,108,4)" fg:x="3407" fg:w="5"/><text x="19.7632%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (27 samples, 0.15%)</title><rect x="19.5418%" y="133" width="0.1546%" height="15" fill="rgb(247,173,49)" fg:x="3412" fg:w="27"/><text x="19.7918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (181 samples, 1.04%)</title><rect x="19.6964%" y="133" width="1.0367%" height="15" fill="rgb(224,114,35)" fg:x="3439" fg:w="181"/><text x="19.9464%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.06%)</title><rect x="20.7331%" y="133" width="0.0630%" height="15" fill="rgb(245,159,27)" fg:x="3620" fg:w="11"/><text x="20.9831%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (44 samples, 0.25%)</title><rect x="20.7961%" y="133" width="0.2520%" height="15" fill="rgb(245,172,44)" fg:x="3631" fg:w="44"/><text x="21.0461%" y="143.50"></text></g><g><title>trx`__rdl_alloc_zeroed (13 samples, 0.07%)</title><rect x="21.0481%" y="133" width="0.0745%" height="15" fill="rgb(236,23,11)" fg:x="3675" fg:w="13"/><text x="21.2981%" y="143.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_fwd (83 samples, 0.48%)</title><rect x="21.1226%" y="133" width="0.4754%" height="15" fill="rgb(205,117,38)" fg:x="3688" fg:w="83"/><text x="21.3726%" y="143.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (112 samples, 0.64%)</title><rect x="21.5979%" y="133" width="0.6415%" height="15" fill="rgb(237,72,25)" fg:x="3771" fg:w="112"/><text x="21.8479%" y="143.50"></text></g><g><title>trx`regex_automata::dfa::DFA::rfind_at (49 samples, 0.28%)</title><rect x="21.9588%" y="117" width="0.2806%" height="15" fill="rgb(244,70,9)" fg:x="3834" fg:w="49"/><text x="22.2088%" y="127.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::trim (1,336 samples, 7.65%)</title><rect x="14.6048%" y="149" width="7.6518%" height="15" fill="rgb(217,125,39)" fg:x="2550" fg:w="1336"/><text x="14.8548%" y="159.50">trx`csv::b..</text></g><g><title>trx`regex_automata::dfa::DFA::rfind_at (3 samples, 0.02%)</title><rect x="22.2394%" y="133" width="0.0172%" height="15" fill="rgb(235,36,10)" fg:x="3883" fg:w="3"/><text x="22.4894%" y="143.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::validate (31 samples, 0.18%)</title><rect x="22.2566%" y="149" width="0.1775%" height="15" fill="rgb(251,123,47)" fg:x="3886" fg:w="31"/><text x="22.5066%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="23.5223%" y="101" width="0.0172%" height="15" fill="rgb(221,13,13)" fg:x="4107" fg:w="3"/><text x="23.7723%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="23.5395%" y="101" width="0.0172%" height="15" fill="rgb(238,131,9)" fg:x="4110" fg:w="3"/><text x="23.7895%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="23.5567%" y="101" width="0.0115%" height="15" fill="rgb(211,50,8)" fg:x="4113" fg:w="2"/><text x="23.8067%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="23.5739%" y="101" width="0.0115%" height="15" fill="rgb(245,182,24)" fg:x="4116" fg:w="2"/><text x="23.8239%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="23.9290%" y="69" width="0.0115%" height="15" fill="rgb(242,14,37)" fg:x="4178" fg:w="2"/><text x="24.1790%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (141 samples, 0.81%)</title><rect x="23.8603%" y="85" width="0.8076%" height="15" fill="rgb(246,228,12)" fg:x="4166" fg:w="141"/><text x="24.1103%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (127 samples, 0.73%)</title><rect x="23.9404%" y="69" width="0.7274%" height="15" fill="rgb(213,55,15)" fg:x="4180" fg:w="127"/><text x="24.1904%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (121 samples, 0.69%)</title><rect x="23.9748%" y="53" width="0.6930%" height="15" fill="rgb(209,9,3)" fg:x="4186" fg:w="121"/><text x="24.2248%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.35%)</title><rect x="24.3184%" y="37" width="0.3494%" height="15" fill="rgb(230,59,30)" fg:x="4246" fg:w="61"/><text x="24.5684%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.03%)</title><rect x="24.6678%" y="85" width="0.0286%" height="15" fill="rgb(209,121,21)" fg:x="4307" fg:w="5"/><text x="24.9178%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (50 samples, 0.29%)</title><rect x="24.8053%" y="69" width="0.2864%" height="15" fill="rgb(220,109,13)" fg:x="4331" fg:w="50"/><text x="25.0553%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (72 samples, 0.41%)</title><rect x="24.6964%" y="85" width="0.4124%" height="15" fill="rgb(232,18,1)" fg:x="4312" fg:w="72"/><text x="24.9464%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="25.0916%" y="69" width="0.0172%" height="15" fill="rgb(215,41,42)" fg:x="4381" fg:w="3"/><text x="25.3416%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.03%)</title><rect x="25.1088%" y="85" width="0.0286%" height="15" fill="rgb(224,123,36)" fg:x="4384" fg:w="5"/><text x="25.3588%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (48 samples, 0.27%)</title><rect x="25.1375%" y="85" width="0.2749%" height="15" fill="rgb(240,125,3)" fg:x="4389" fg:w="48"/><text x="25.3875%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="25.4181%" y="85" width="0.0115%" height="15" fill="rgb(205,98,50)" fg:x="4438" fg:w="2"/><text x="25.6681%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.07%)</title><rect x="25.4296%" y="85" width="0.0687%" height="15" fill="rgb(205,185,37)" fg:x="4440" fg:w="12"/><text x="25.6796%" y="95.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (21 samples, 0.12%)</title><rect x="25.6357%" y="53" width="0.1203%" height="15" fill="rgb(238,207,15)" fg:x="4476" fg:w="21"/><text x="25.8857%" y="63.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (41 samples, 0.23%)</title><rect x="25.5384%" y="69" width="0.2348%" height="15" fill="rgb(213,199,42)" fg:x="4459" fg:w="41"/><text x="25.7884%" y="79.50"></text></g><g><title>trx`rust_decimal::str::handle_point (3 samples, 0.02%)</title><rect x="25.7560%" y="53" width="0.0172%" height="15" fill="rgb(235,201,11)" fg:x="4497" fg:w="3"/><text x="26.0060%" y="63.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::from_str_exact (49 samples, 0.28%)</title><rect x="25.4983%" y="85" width="0.2806%" height="15" fill="rgb(207,46,11)" fg:x="4452" fg:w="49"/><text x="25.7483%" y="95.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp (252 samples, 1.44%)</title><rect x="25.7789%" y="85" width="1.4433%" height="15" fill="rgb(241,35,35)" fg:x="4501" fg:w="252"/><text x="26.0289%" y="95.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp_with_strategy (249 samples, 1.43%)</title><rect x="25.7961%" y="69" width="1.4261%" height="15" fill="rgb(243,32,47)" fg:x="4504" fg:w="249"/><text x="26.0461%" y="79.50"></text></g><g><title>trx`&lt;lib::amount::Amount as serde::de::Deserialize&gt;::deserialize (637 samples, 3.65%)</title><rect x="23.5853%" y="101" width="3.6483%" height="15" fill="rgb(247,202,23)" fg:x="4118" fg:w="637"/><text x="23.8353%" y="111.50">trx`..</text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp_with_strategy (2 samples, 0.01%)</title><rect x="27.2222%" y="85" width="0.0115%" height="15" fill="rgb(219,102,11)" fg:x="4753" fg:w="2"/><text x="27.4722%" y="95.50"></text></g><g><title>trx`__rdl_dealloc (3 samples, 0.02%)</title><rect x="27.2451%" y="101" width="0.0172%" height="15" fill="rgb(243,110,44)" fg:x="4757" fg:w="3"/><text x="27.4951%" y="111.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (684 samples, 3.92%)</title><rect x="23.3620%" y="117" width="3.9175%" height="15" fill="rgb(222,74,54)" fg:x="4079" fg:w="684"/><text x="23.6120%" y="127.50">trx`..</text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u16&gt;::from_str (25 samples, 0.14%)</title><rect x="27.5601%" y="101" width="0.1432%" height="15" fill="rgb(216,99,12)" fg:x="4812" fg:w="25"/><text x="27.8101%" y="111.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (121 samples, 0.69%)</title><rect x="27.2795%" y="117" width="0.6930%" height="15" fill="rgb(226,22,26)" fg:x="4763" fg:w="121"/><text x="27.5295%" y="127.50"></text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (47 samples, 0.27%)</title><rect x="27.7033%" y="101" width="0.2692%" height="15" fill="rgb(217,163,10)" fg:x="4837" fg:w="47"/><text x="27.9533%" y="111.50"></text></g><g><title>trx`&lt;lib::amount::Amount as serde::de::Deserialize&gt;::deserialize (2 samples, 0.01%)</title><rect x="27.9725%" y="117" width="0.0115%" height="15" fill="rgb(213,25,53)" fg:x="4884" fg:w="2"/><text x="28.2225%" y="127.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (26 samples, 0.15%)</title><rect x="27.9840%" y="117" width="0.1489%" height="15" fill="rgb(252,105,26)" fg:x="4886" fg:w="26"/><text x="28.2340%" y="127.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (55 samples, 0.32%)</title><rect x="28.1901%" y="101" width="0.3150%" height="15" fill="rgb(220,39,43)" fg:x="4922" fg:w="55"/><text x="28.4401%" y="111.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (26 samples, 0.15%)</title><rect x="28.3562%" y="85" width="0.1489%" height="15" fill="rgb(229,68,48)" fg:x="4951" fg:w="26"/><text x="28.6062%" y="95.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (66 samples, 0.38%)</title><rect x="28.1329%" y="117" width="0.3780%" height="15" fill="rgb(252,8,32)" fg:x="4912" fg:w="66"/><text x="28.3829%" y="127.50"></text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u16&gt;::from_str (6 samples, 0.03%)</title><rect x="28.5109%" y="117" width="0.0344%" height="15" fill="rgb(223,20,43)" fg:x="4978" fg:w="6"/><text x="28.7609%" y="127.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,026 samples, 5.88%)</title><rect x="22.6804%" y="133" width="5.8763%" height="15" fill="rgb(229,81,49)" fg:x="3960" fg:w="1026"/><text x="22.9304%" y="143.50">trx`&lt;&amp;m..</text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (2 samples, 0.01%)</title><rect x="28.5452%" y="117" width="0.0115%" height="15" fill="rgb(236,28,36)" fg:x="4984" fg:w="2"/><text x="28.7952%" y="127.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.02%)</title><rect x="28.5567%" y="133" width="0.0172%" height="15" fill="rgb(249,185,26)" fg:x="4986" fg:w="3"/><text x="28.8067%" y="143.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (6 samples, 0.03%)</title><rect x="28.5739%" y="133" width="0.0344%" height="15" fill="rgb(249,174,33)" fg:x="4989" fg:w="6"/><text x="28.8239%" y="143.50"></text></g><g><title>trx`csv::deserializer::deserialize_string_record (1,079 samples, 6.18%)</title><rect x="22.4341%" y="149" width="6.1798%" height="15" fill="rgb(233,201,37)" fg:x="3917" fg:w="1079"/><text x="22.6841%" y="159.50">trx`csv:..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (124 samples, 0.71%)</title><rect x="30.6758%" y="85" width="0.7102%" height="15" fill="rgb(221,78,26)" fg:x="5356" fg:w="124"/><text x="30.9258%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (14 samples, 0.08%)</title><rect x="31.3860%" y="85" width="0.0802%" height="15" fill="rgb(250,127,30)" fg:x="5480" fg:w="14"/><text x="31.6360%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (249 samples, 1.43%)</title><rect x="30.0630%" y="101" width="1.4261%" height="15" fill="rgb(230,49,44)" fg:x="5249" fg:w="249"/><text x="30.3130%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="31.4662%" y="85" width="0.0229%" height="15" fill="rgb(229,67,23)" fg:x="5494" fg:w="4"/><text x="31.7162%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="31.4891%" y="101" width="0.0172%" height="15" fill="rgb(249,83,47)" fg:x="5498" fg:w="3"/><text x="31.7391%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (4 samples, 0.02%)</title><rect x="31.5063%" y="101" width="0.0229%" height="15" fill="rgb(215,43,3)" fg:x="5501" fg:w="4"/><text x="31.7563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (292 samples, 1.67%)</title><rect x="29.8683%" y="133" width="1.6724%" height="15" fill="rgb(238,154,13)" fg:x="5215" fg:w="292"/><text x="30.1183%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (273 samples, 1.56%)</title><rect x="29.9771%" y="117" width="1.5636%" height="15" fill="rgb(219,56,2)" fg:x="5234" fg:w="273"/><text x="30.2271%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="31.5292%" y="101" width="0.0115%" height="15" fill="rgb(233,0,4)" fg:x="5505" fg:w="2"/><text x="31.7792%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="31.6323%" y="117" width="0.0229%" height="15" fill="rgb(235,30,7)" fg:x="5523" fg:w="4"/><text x="31.8823%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (120 samples, 0.69%)</title><rect x="31.6896%" y="101" width="0.6873%" height="15" fill="rgb(250,79,13)" fg:x="5533" fg:w="120"/><text x="31.9396%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (59 samples, 0.34%)</title><rect x="32.0389%" y="85" width="0.3379%" height="15" fill="rgb(211,146,34)" fg:x="5594" fg:w="59"/><text x="32.2889%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (148 samples, 0.85%)</title><rect x="31.5407%" y="133" width="0.8477%" height="15" fill="rgb(228,22,38)" fg:x="5507" fg:w="148"/><text x="31.7907%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (128 samples, 0.73%)</title><rect x="31.6552%" y="117" width="0.7331%" height="15" fill="rgb(235,168,5)" fg:x="5527" fg:w="128"/><text x="31.9052%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="32.3769%" y="101" width="0.0115%" height="15" fill="rgb(221,155,16)" fg:x="5653" fg:w="2"/><text x="32.6269%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (5 samples, 0.03%)</title><rect x="32.3883%" y="133" width="0.0286%" height="15" fill="rgb(215,215,53)" fg:x="5655" fg:w="5"/><text x="32.6383%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (147 samples, 0.84%)</title><rect x="32.8179%" y="117" width="0.8419%" height="15" fill="rgb(223,4,10)" fg:x="5730" fg:w="147"/><text x="33.0679%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (224 samples, 1.28%)</title><rect x="32.4227%" y="133" width="1.2829%" height="15" fill="rgb(234,103,6)" fg:x="5661" fg:w="224"/><text x="32.6727%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.05%)</title><rect x="33.6598%" y="117" width="0.0458%" height="15" fill="rgb(227,97,0)" fg:x="5877" fg:w="8"/><text x="33.9098%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="33.7056%" y="133" width="0.0115%" height="15" fill="rgb(234,150,53)" fg:x="5885" fg:w="2"/><text x="33.9556%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.18%)</title><rect x="33.7171%" y="133" width="0.1833%" height="15" fill="rgb(228,201,54)" fg:x="5887" fg:w="32"/><text x="33.9671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (215 samples, 1.23%)</title><rect x="33.9003%" y="133" width="1.2314%" height="15" fill="rgb(222,22,37)" fg:x="5919" fg:w="215"/><text x="34.1503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="35.1317%" y="133" width="0.0172%" height="15" fill="rgb(237,53,32)" fg:x="6134" fg:w="3"/><text x="35.3817%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (59 samples, 0.34%)</title><rect x="35.1489%" y="133" width="0.3379%" height="15" fill="rgb(233,25,53)" fg:x="6137" fg:w="59"/><text x="35.3989%" y="143.50"></text></g><g><title>trx`__rdl_alloc_zeroed (12 samples, 0.07%)</title><rect x="35.4868%" y="133" width="0.0687%" height="15" fill="rgb(210,40,34)" fg:x="6196" fg:w="12"/><text x="35.7368%" y="143.50"></text></g><g><title>trx`csv::string_record::StringRecord::trim (1,292 samples, 7.40%)</title><rect x="28.6140%" y="149" width="7.3998%" height="15" fill="rgb(241,220,44)" fg:x="4996" fg:w="1292"/><text x="28.8640%" y="159.50">trx`csv::s..</text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (80 samples, 0.46%)</title><rect x="35.5556%" y="133" width="0.4582%" height="15" fill="rgb(235,28,35)" fg:x="6208" fg:w="80"/><text x="35.8056%" y="143.50"></text></g><g><title>trx`csv::writer::Writer&lt;W&gt;::serialize (9 samples, 0.05%)</title><rect x="36.0137%" y="149" width="0.0515%" height="15" fill="rgb(210,56,17)" fg:x="6288" fg:w="9"/><text x="36.2637%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.05%)</title><rect x="36.0137%" y="133" width="0.0515%" height="15" fill="rgb(224,130,29)" fg:x="6288" fg:w="9"/><text x="36.2637%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.05%)</title><rect x="36.0137%" y="117" width="0.0515%" height="15" fill="rgb(235,212,8)" fg:x="6288" fg:w="9"/><text x="36.2637%" y="127.50"></text></g><g><title>trx`csv_core::reader::Reader::read_record (281 samples, 1.61%)</title><rect x="36.0653%" y="149" width="1.6094%" height="15" fill="rgb(223,33,50)" fg:x="6297" fg:w="281"/><text x="36.3153%" y="159.50"></text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,563 samples, 37.59%)</title><rect x="0.0916%" y="165" width="37.5888%" height="15" fill="rgb(219,149,13)" fg:x="16" fg:w="6563"/><text x="0.3416%" y="175.50">trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::futu..</text></g><g><title>trx`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;lib::clients::actor_like::Clients as lib::clients::AsyncClients&gt;::publish_transaction::{{closure}}&gt;&gt; (6 samples, 0.03%)</title><rect x="37.6976%" y="165" width="0.0344%" height="15" fill="rgb(250,156,29)" fg:x="6582" fg:w="6"/><text x="37.9476%" y="175.50"></text></g><g><title>trx`csv::Trim::should_trim_fields (2 samples, 0.01%)</title><rect x="37.7320%" y="165" width="0.0115%" height="15" fill="rgb(216,193,19)" fg:x="6588" fg:w="2"/><text x="37.9820%" y="175.50"></text></g><g><title>dyld`start (6,594 samples, 37.77%)</title><rect x="0.0000%" y="341" width="37.7663%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="6594"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>trx`main (6,589 samples, 37.74%)</title><rect x="0.0286%" y="325" width="37.7377%" height="15" fill="rgb(241,47,5)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="335.50">trx`main</text></g><g><title>trx`std::rt::lang_start_internal (6,589 samples, 37.74%)</title><rect x="0.0286%" y="309" width="37.7377%" height="15" fill="rgb(233,42,35)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="319.50">trx`std::rt::lang_start_internal</text></g><g><title>trx`std::rt::lang_start::_{{closure}} (6,589 samples, 37.74%)</title><rect x="0.0286%" y="293" width="37.7377%" height="15" fill="rgb(231,13,6)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="303.50">trx`std::rt::lang_start::_{{closure}}</text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (6,589 samples, 37.74%)</title><rect x="0.0286%" y="277" width="37.7377%" height="15" fill="rgb(207,181,40)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="287.50">trx`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>trx`trx::main (6,589 samples, 37.74%)</title><rect x="0.0286%" y="261" width="37.7377%" height="15" fill="rgb(254,173,49)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="271.50">trx`trx::main</text></g><g><title>trx`tokio::runtime::Runtime::block_on (6,589 samples, 37.74%)</title><rect x="0.0286%" y="245" width="37.7377%" height="15" fill="rgb(221,1,38)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="255.50">trx`tokio::runtime::Runtime::block_on</text></g><g><title>trx`tokio::runtime::thread_pool::ThreadPool::block_on (6,589 samples, 37.74%)</title><rect x="0.0286%" y="229" width="37.7377%" height="15" fill="rgb(206,124,46)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="239.50">trx`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>trx`tokio::park::thread::CachedParkThread::block_on (6,589 samples, 37.74%)</title><rect x="0.0286%" y="213" width="37.7377%" height="15" fill="rgb(249,21,11)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="223.50">trx`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (6,589 samples, 37.74%)</title><rect x="0.0286%" y="197" width="37.7377%" height="15" fill="rgb(222,201,40)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="207.50">trx`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,589 samples, 37.74%)</title><rect x="0.0286%" y="181" width="37.7377%" height="15" fill="rgb(235,61,29)" fg:x="5" fg:w="6589"/><text x="0.2786%" y="191.50">trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::futu..</text></g><g><title>trx`csv_core::reader::Reader::read_record (3 samples, 0.02%)</title><rect x="37.7491%" y="165" width="0.0172%" height="15" fill="rgb(219,207,3)" fg:x="6591" fg:w="3"/><text x="37.9991%" y="175.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.01%)</title><rect x="37.7663%" y="181" width="0.0115%" height="15" fill="rgb(222,56,46)" fg:x="6594" fg:w="2"/><text x="38.0163%" y="191.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (3 samples, 0.02%)</title><rect x="37.7778%" y="181" width="0.0172%" height="15" fill="rgb(239,76,54)" fg:x="6596" fg:w="3"/><text x="38.0278%" y="191.50"></text></g><g><title>trx`tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (24 samples, 0.14%)</title><rect x="37.7950%" y="181" width="0.1375%" height="15" fill="rgb(231,124,27)" fg:x="6599" fg:w="24"/><text x="38.0450%" y="191.50"></text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 0.01%)</title><rect x="37.9324%" y="181" width="0.0115%" height="15" fill="rgb(249,195,6)" fg:x="6623" fg:w="2"/><text x="38.1824%" y="191.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park_timeout (2 samples, 0.01%)</title><rect x="47.2050%" y="165" width="0.0115%" height="15" fill="rgb(237,174,47)" fg:x="8242" fg:w="2"/><text x="47.4550%" y="175.50"></text></g><g><title>trx`parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.02%)</title><rect x="47.2222%" y="165" width="0.0172%" height="15" fill="rgb(206,201,31)" fg:x="8245" fg:w="3"/><text x="47.4722%" y="175.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (94 samples, 0.54%)</title><rect x="47.2394%" y="165" width="0.5384%" height="15" fill="rgb(231,57,52)" fg:x="8248" fg:w="94"/><text x="47.4894%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3 samples, 0.02%)</title><rect x="47.7606%" y="149" width="0.0172%" height="15" fill="rgb(248,177,22)" fg:x="8339" fg:w="3"/><text x="48.0106%" y="159.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.01%)</title><rect x="47.7778%" y="165" width="0.0115%" height="15" fill="rgb(215,211,37)" fg:x="8342" fg:w="2"/><text x="48.0278%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.01%)</title><rect x="47.7778%" y="149" width="0.0115%" height="15" fill="rgb(241,128,51)" fg:x="8342" fg:w="2"/><text x="48.0278%" y="159.50"></text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.03%)</title><rect x="47.7892%" y="165" width="0.0286%" height="15" fill="rgb(227,165,31)" fg:x="8344" fg:w="5"/><text x="48.0392%" y="175.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (317 samples, 1.82%)</title><rect x="47.8236%" y="165" width="1.8156%" height="15" fill="rgb(228,167,24)" fg:x="8350" fg:w="317"/><text x="48.0736%" y="175.50">t..</text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (28 samples, 0.16%)</title><rect x="49.4788%" y="149" width="0.1604%" height="15" fill="rgb(228,143,12)" fg:x="8639" fg:w="28"/><text x="49.7288%" y="159.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (29 samples, 0.17%)</title><rect x="49.6392%" y="165" width="0.1661%" height="15" fill="rgb(249,149,8)" fg:x="8667" fg:w="29"/><text x="49.8892%" y="175.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (16 samples, 0.09%)</title><rect x="49.7136%" y="149" width="0.0916%" height="15" fill="rgb(243,35,44)" fg:x="8680" fg:w="16"/><text x="49.9636%" y="159.50"></text></g><g><title>trx`tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (281 samples, 1.61%)</title><rect x="49.8053%" y="165" width="1.6094%" height="15" fill="rgb(246,89,9)" fg:x="8696" fg:w="281"/><text x="50.0553%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="54.6449%" y="133" width="0.0172%" height="15" fill="rgb(233,213,13)" fg:x="9541" fg:w="3"/><text x="54.8949%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.03%)</title><rect x="54.6621%" y="133" width="0.0344%" height="15" fill="rgb(233,141,41)" fg:x="9544" fg:w="6"/><text x="54.9121%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,531 samples, 14.50%)</title><rect x="55.5212%" y="117" width="14.4960%" height="15" fill="rgb(239,167,4)" fg:x="9694" fg:w="2531"/><text x="55.7712%" y="127.50">libsystem_kernel.dylib..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvclrprepost (2 samples, 0.01%)</title><rect x="70.2749%" y="101" width="0.0115%" height="15" fill="rgb(209,217,16)" fg:x="12270" fg:w="2"/><text x="70.5249%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (37 samples, 0.21%)</title><rect x="70.2921%" y="101" width="0.2119%" height="15" fill="rgb(219,88,35)" fg:x="12273" fg:w="37"/><text x="70.5421%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (15 samples, 0.09%)</title><rect x="70.5040%" y="101" width="0.0859%" height="15" fill="rgb(220,193,23)" fg:x="12310" fg:w="15"/><text x="70.7540%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (15 samples, 0.09%)</title><rect x="70.5040%" y="85" width="0.0859%" height="15" fill="rgb(230,90,52)" fg:x="12310" fg:w="15"/><text x="70.7540%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (60 samples, 0.34%)</title><rect x="70.5899%" y="101" width="0.3436%" height="15" fill="rgb(252,106,19)" fg:x="12325" fg:w="60"/><text x="70.8399%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (172 samples, 0.99%)</title><rect x="70.0229%" y="117" width="0.9851%" height="15" fill="rgb(206,74,20)" fg:x="12226" fg:w="172"/><text x="70.2729%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (13 samples, 0.07%)</title><rect x="70.9336%" y="101" width="0.0745%" height="15" fill="rgb(230,138,44)" fg:x="12385" fg:w="13"/><text x="71.1836%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9 samples, 0.05%)</title><rect x="71.0137%" y="117" width="0.0515%" height="15" fill="rgb(235,182,43)" fg:x="12399" fg:w="9"/><text x="71.2637%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.04%)</title><rect x="71.0653%" y="117" width="0.0401%" height="15" fill="rgb(242,16,51)" fg:x="12408" fg:w="7"/><text x="71.3153%" y="127.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (3,419 samples, 19.58%)</title><rect x="51.5578%" y="149" width="19.5819%" height="15" fill="rgb(248,9,4)" fg:x="9002" fg:w="3419"/><text x="51.8078%" y="159.50">trx`&lt;tokio::runtime::thread_poo..</text></g><g><title>trx`parking_lot::condvar::Condvar::wait_until_internal (2,871 samples, 16.44%)</title><rect x="54.6964%" y="133" width="16.4433%" height="15" fill="rgb(210,31,22)" fg:x="9550" fg:w="2871"/><text x="54.9464%" y="143.50">trx`parking_lot::condvar:..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (6 samples, 0.03%)</title><rect x="71.1054%" y="117" width="0.0344%" height="15" fill="rgb(239,54,39)" fg:x="12415" fg:w="6"/><text x="71.3554%" y="127.50"></text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::park_timeout (3,449 samples, 19.75%)</title><rect x="51.4147%" y="165" width="19.7537%" height="15" fill="rgb(230,99,41)" fg:x="8977" fg:w="3449"/><text x="51.6647%" y="175.50">trx`tokio::runtime::thread_pool..</text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park_timeout (5 samples, 0.03%)</title><rect x="71.1397%" y="149" width="0.0286%" height="15" fill="rgb(253,106,12)" fg:x="12421" fg:w="5"/><text x="71.3897%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (6 samples, 0.03%)</title><rect x="72.5372%" y="149" width="0.0344%" height="15" fill="rgb(213,46,41)" fg:x="12665" fg:w="6"/><text x="72.7872%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (3 samples, 0.02%)</title><rect x="72.5716%" y="149" width="0.0172%" height="15" fill="rgb(215,133,35)" fg:x="12671" fg:w="3"/><text x="72.8216%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.02%)</title><rect x="72.5888%" y="149" width="0.0229%" height="15" fill="rgb(213,28,5)" fg:x="12674" fg:w="4"/><text x="72.8388%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.03%)</title><rect x="72.6117%" y="149" width="0.0344%" height="15" fill="rgb(215,77,49)" fg:x="12678" fg:w="6"/><text x="72.8617%" y="159.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Unparker as tokio::park::Unpark&gt;::unpark (156 samples, 0.89%)</title><rect x="72.6460%" y="149" width="0.8935%" height="15" fill="rgb(248,100,22)" fg:x="12684" fg:w="156"/><text x="72.8960%" y="159.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.04%)</title><rect x="73.4994%" y="133" width="0.0401%" height="15" fill="rgb(208,67,9)" fg:x="12833" fg:w="7"/><text x="73.7494%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,489 samples, 8.53%)</title><rect x="75.0229%" y="133" width="8.5281%" height="15" fill="rgb(219,133,21)" fg:x="13099" fg:w="1489"/><text x="75.2729%" y="143.50">libsystem_ke..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (75 samples, 0.43%)</title><rect x="83.5510%" y="133" width="0.4296%" height="15" fill="rgb(246,46,29)" fg:x="14588" fg:w="75"/><text x="83.8010%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (84 samples, 0.48%)</title><rect x="83.9863%" y="133" width="0.4811%" height="15" fill="rgb(246,185,52)" fg:x="14664" fg:w="84"/><text x="84.2363%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (21 samples, 0.12%)</title><rect x="84.3471%" y="117" width="0.1203%" height="15" fill="rgb(252,136,11)" fg:x="14727" fg:w="21"/><text x="84.5971%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (226 samples, 1.29%)</title><rect x="84.4674%" y="133" width="1.2944%" height="15" fill="rgb(219,138,53)" fg:x="14748" fg:w="226"/><text x="84.7174%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (9 samples, 0.05%)</title><rect x="85.7617%" y="133" width="0.0515%" height="15" fill="rgb(211,51,23)" fg:x="14974" fg:w="9"/><text x="86.0117%" y="143.50"></text></g><g><title>trx`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (4 samples, 0.02%)</title><rect x="85.8133%" y="133" width="0.0229%" height="15" fill="rgb(247,221,28)" fg:x="14983" fg:w="4"/><text x="86.0633%" y="143.50"></text></g><g><title>trx`parking_lot_core::parking_lot::lock_bucket_pair (160 samples, 0.92%)</title><rect x="85.8362%" y="133" width="0.9164%" height="15" fill="rgb(251,222,45)" fg:x="14987" fg:w="160"/><text x="86.0862%" y="143.50"></text></g><g><title>trx`parking_lot::condvar::Condvar::notify_one_slow (2,305 samples, 13.20%)</title><rect x="73.5567%" y="149" width="13.2016%" height="15" fill="rgb(217,162,53)" fg:x="12843" fg:w="2305"/><text x="73.8067%" y="159.50">trx`parking_lot::con..</text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.02%)</title><rect x="86.7583%" y="149" width="0.0229%" height="15" fill="rgb(229,93,14)" fg:x="15148" fg:w="4"/><text x="87.0083%" y="159.50"></text></g><g><title>trx`parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.01%)</title><rect x="86.7869%" y="149" width="0.0115%" height="15" fill="rgb(209,67,49)" fg:x="15153" fg:w="2"/><text x="87.0369%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.04%)</title><rect x="87.2222%" y="133" width="0.0401%" height="15" fill="rgb(213,87,29)" fg:x="15229" fg:w="7"/><text x="87.4722%" y="143.50"></text></g><g><title>trx`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.02%)</title><rect x="87.2623%" y="133" width="0.0172%" height="15" fill="rgb(205,151,52)" fg:x="15236" fg:w="3"/><text x="87.5123%" y="143.50"></text></g><g><title>trx`tokio::coop::CURRENT::__getit (2 samples, 0.01%)</title><rect x="87.2795%" y="133" width="0.0115%" height="15" fill="rgb(253,215,39)" fg:x="15239" fg:w="2"/><text x="87.5295%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.02%)</title><rect x="87.8923%" y="85" width="0.0229%" height="15" fill="rgb(221,220,41)" fg:x="15346" fg:w="4"/><text x="88.1423%" y="95.50"></text></g><g><title>trx`&lt;lib::amount::Amount as core::ops::arith::SubAssign&gt;::sub_assign (3 samples, 0.02%)</title><rect x="87.9152%" y="85" width="0.0172%" height="15" fill="rgb(218,133,21)" fg:x="15350" fg:w="3"/><text x="88.1652%" y="95.50"></text></g><g><title>trx`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="87.9324%" y="85" width="0.0286%" height="15" fill="rgb(221,193,43)" fg:x="15353" fg:w="5"/><text x="88.1824%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (4 samples, 0.02%)</title><rect x="87.9611%" y="69" width="0.0229%" height="15" fill="rgb(240,128,52)" fg:x="15358" fg:w="4"/><text x="88.2111%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (5 samples, 0.03%)</title><rect x="87.9840%" y="53" width="0.0286%" height="15" fill="rgb(253,114,12)" fg:x="15362" fg:w="5"/><text x="88.2340%" y="63.50"></text></g><g><title>trx`alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.07%)</title><rect x="87.9611%" y="85" width="0.0687%" height="15" fill="rgb(215,223,47)" fg:x="15358" fg:w="12"/><text x="88.2111%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.05%)</title><rect x="87.9840%" y="69" width="0.0458%" height="15" fill="rgb(248,225,23)" fg:x="15362" fg:w="8"/><text x="88.2340%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (3 samples, 0.02%)</title><rect x="88.0126%" y="53" width="0.0172%" height="15" fill="rgb(250,108,0)" fg:x="15367" fg:w="3"/><text x="88.2626%" y="63.50"></text></g><g><title>trx`&lt;lib::amount::Amount as core::ops::arith::SubAssign&gt;::sub_assign (9 samples, 0.05%)</title><rect x="93.4364%" y="69" width="0.0515%" height="15" fill="rgb(228,208,7)" fg:x="16314" fg:w="9"/><text x="93.6864%" y="79.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (61 samples, 0.35%)</title><rect x="93.4880%" y="69" width="0.3494%" height="15" fill="rgb(244,45,10)" fg:x="16323" fg:w="61"/><text x="93.7380%" y="79.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (86 samples, 0.49%)</title><rect x="93.8373%" y="69" width="0.4926%" height="15" fill="rgb(207,125,25)" fg:x="16384" fg:w="86"/><text x="94.0873%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="94.3013%" y="53" width="0.0286%" height="15" fill="rgb(210,195,18)" fg:x="16465" fg:w="5"/><text x="94.5513%" y="63.50"></text></g><g><title>trx`rust_decimal::ops::add::add_impl (12 samples, 0.07%)</title><rect x="94.3356%" y="69" width="0.0687%" height="15" fill="rgb(249,80,12)" fg:x="16471" fg:w="12"/><text x="94.5856%" y="79.50"></text></g><g><title>trx`rust_decimal::ops::add::add_sub_internal (10 samples, 0.06%)</title><rect x="94.3471%" y="53" width="0.0573%" height="15" fill="rgb(221,65,9)" fg:x="16473" fg:w="10"/><text x="94.5971%" y="63.50"></text></g><g><title>trx`lib::client::Client::process_transaction (1,118 samples, 6.40%)</title><rect x="88.0355%" y="85" width="6.4032%" height="15" fill="rgb(235,49,36)" fg:x="15371" fg:w="1118"/><text x="88.2855%" y="95.50">trx`lib:..</text></g><g><title>trx`rust_decimal::ops::cmp::cmp_impl (5 samples, 0.03%)</title><rect x="94.4101%" y="69" width="0.0286%" height="15" fill="rgb(225,32,20)" fg:x="16484" fg:w="5"/><text x="94.6601%" y="79.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.03%)</title><rect x="94.5876%" y="69" width="0.0344%" height="15" fill="rgb(215,141,46)" fg:x="16515" fg:w="6"/><text x="94.8376%" y="79.50"></text></g><g><title>trx`tokio::coop::Budget::decrement (7 samples, 0.04%)</title><rect x="94.6220%" y="69" width="0.0401%" height="15" fill="rgb(250,160,47)" fg:x="16521" fg:w="7"/><text x="94.8720%" y="79.50"></text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (45 samples, 0.26%)</title><rect x="94.4444%" y="85" width="0.2577%" height="15" fill="rgb(216,222,40)" fg:x="16490" fg:w="45"/><text x="94.6944%" y="95.50"></text></g><g><title>trx`tokio::coop::CURRENT::__getit (7 samples, 0.04%)</title><rect x="94.6621%" y="69" width="0.0401%" height="15" fill="rgb(234,217,39)" fg:x="16528" fg:w="7"/><text x="94.9121%" y="79.50"></text></g><g><title>trx`tokio::coop::Budget::decrement (3 samples, 0.02%)</title><rect x="94.7022%" y="85" width="0.0172%" height="15" fill="rgb(207,178,40)" fg:x="16535" fg:w="3"/><text x="94.9522%" y="95.50"></text></g><g><title>trx`tokio::coop::CURRENT::__getit (6 samples, 0.03%)</title><rect x="94.7194%" y="85" width="0.0344%" height="15" fill="rgb(221,136,13)" fg:x="16538" fg:w="6"/><text x="94.9694%" y="95.50"></text></g><g><title>trx`tokio::coop::RestoreOnPending::made_progress (2 samples, 0.01%)</title><rect x="94.7537%" y="85" width="0.0115%" height="15" fill="rgb(249,199,10)" fg:x="16544" fg:w="2"/><text x="95.0037%" y="95.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="94.9943%" y="69" width="0.0286%" height="15" fill="rgb(249,222,13)" fg:x="16586" fg:w="5"/><text x="95.2443%" y="79.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (99 samples, 0.57%)</title><rect x="95.0229%" y="69" width="0.5670%" height="15" fill="rgb(244,185,38)" fg:x="16591" fg:w="99"/><text x="95.2729%" y="79.50"></text></g><g><title>trx`tokio::coop::RestoreOnPending::made_progress (2 samples, 0.01%)</title><rect x="95.5899%" y="69" width="0.0115%" height="15" fill="rgb(236,202,9)" fg:x="16690" fg:w="2"/><text x="95.8399%" y="79.50"></text></g><g><title>trx`tokio::runtime::task::waker::clone_waker (2 samples, 0.01%)</title><rect x="95.6014%" y="69" width="0.0115%" height="15" fill="rgb(250,229,37)" fg:x="16692" fg:w="2"/><text x="95.8514%" y="79.50"></text></g><g><title>trx`tokio::sync::mpsc::block::is_ready (8 samples, 0.05%)</title><rect x="95.6128%" y="69" width="0.0458%" height="15" fill="rgb(206,174,23)" fg:x="16694" fg:w="8"/><text x="95.8628%" y="79.50"></text></g><g><title>trx`tokio::sync::mpsc::block::is_tx_closed (4 samples, 0.02%)</title><rect x="95.6586%" y="69" width="0.0229%" height="15" fill="rgb(211,33,43)" fg:x="16702" fg:w="4"/><text x="95.9086%" y="79.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="98.3162%" y="53" width="0.0172%" height="15" fill="rgb(245,58,50)" fg:x="17166" fg:w="3"/><text x="98.5662%" y="63.50"></text></g><g><title>trx`core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (7 samples, 0.04%)</title><rect x="98.3333%" y="53" width="0.0401%" height="15" fill="rgb(244,68,36)" fg:x="17169" fg:w="7"/><text x="98.5833%" y="63.50"></text></g><g><title>trx`tokio::sync::mpsc::block::is_ready (2 samples, 0.01%)</title><rect x="98.3734%" y="53" width="0.0115%" height="15" fill="rgb(232,229,15)" fg:x="17176" fg:w="2"/><text x="98.6234%" y="63.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (474 samples, 2.71%)</title><rect x="95.6816%" y="69" width="2.7148%" height="15" fill="rgb(254,30,23)" fg:x="16706" fg:w="474"/><text x="95.9316%" y="79.50">tr..</text></g><g><title>trx`tokio::sync::mpsc::block::is_tx_closed (2 samples, 0.01%)</title><rect x="98.3849%" y="53" width="0.0115%" height="15" fill="rgb(235,160,14)" fg:x="17178" fg:w="2"/><text x="98.6349%" y="63.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_inc (2 samples, 0.01%)</title><rect x="98.9863%" y="53" width="0.0115%" height="15" fill="rgb(212,155,44)" fg:x="17283" fg:w="2"/><text x="99.2363%" y="63.50"></text></g><g><title>trx`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (770 samples, 4.41%)</title><rect x="94.7652%" y="85" width="4.4101%" height="15" fill="rgb(226,2,50)" fg:x="16546" fg:w="770"/><text x="95.0152%" y="95.50">trx`t..</text></g><g><title>trx`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (136 samples, 0.78%)</title><rect x="98.3963%" y="69" width="0.7789%" height="15" fill="rgb(234,177,6)" fg:x="17180" fg:w="136"/><text x="98.6463%" y="79.50"></text></g><g><title>trx`tokio::runtime::task::waker::clone_waker (31 samples, 0.18%)</title><rect x="98.9977%" y="53" width="0.1775%" height="15" fill="rgb(217,24,9)" fg:x="17285" fg:w="31"/><text x="99.2477%" y="63.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_inc (25 samples, 0.14%)</title><rect x="99.0321%" y="37" width="0.1432%" height="15" fill="rgb(220,13,46)" fg:x="17291" fg:w="25"/><text x="99.2821%" y="47.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (11 samples, 0.06%)</title><rect x="99.1753%" y="85" width="0.0630%" height="15" fill="rgb(239,221,27)" fg:x="17316" fg:w="11"/><text x="99.4253%" y="95.50"></text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,037 samples, 11.67%)</title><rect x="87.5773%" y="101" width="11.6667%" height="15" fill="rgb(222,198,25)" fg:x="15291" fg:w="2037"/><text x="87.8273%" y="111.50">trx`&lt;core::future..</text></g><g><title>trx`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="99.2440%" y="101" width="0.0172%" height="15" fill="rgb(211,99,13)" fg:x="17328" fg:w="3"/><text x="99.4940%" y="111.50"></text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.02%)</title><rect x="99.2612%" y="101" width="0.0229%" height="15" fill="rgb(232,111,31)" fg:x="17331" fg:w="4"/><text x="99.5112%" y="111.50"></text></g><g><title>trx`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,063 samples, 11.82%)</title><rect x="87.5143%" y="117" width="11.8156%" height="15" fill="rgb(245,82,37)" fg:x="15280" fg:w="2063"/><text x="87.7643%" y="127.50">trx`&lt;core::panic::..</text></g><g><title>trx`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8 samples, 0.05%)</title><rect x="99.2841%" y="101" width="0.0458%" height="15" fill="rgb(227,149,46)" fg:x="17335" fg:w="8"/><text x="99.5341%" y="111.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_idle (38 samples, 0.22%)</title><rect x="99.3299%" y="117" width="0.2176%" height="15" fill="rgb(218,36,50)" fg:x="17343" fg:w="38"/><text x="99.5799%" y="127.50"></text></g><g><title>trx`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,198 samples, 12.59%)</title><rect x="87.2910%" y="133" width="12.5888%" height="15" fill="rgb(226,80,48)" fg:x="15241" fg:w="2198"/><text x="87.5410%" y="143.50">trx`tokio::runtime:..</text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_running (58 samples, 0.33%)</title><rect x="99.5475%" y="117" width="0.3322%" height="15" fill="rgb(238,224,15)" fg:x="17381" fg:w="58"/><text x="99.7975%" y="127.50"></text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (2,291 samples, 13.12%)</title><rect x="86.7984%" y="149" width="13.1214%" height="15" fill="rgb(241,136,10)" fg:x="15155" fg:w="2291"/><text x="87.0484%" y="159.50">trx`std::thread::loc..</text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_running (6 samples, 0.03%)</title><rect x="99.8855%" y="133" width="0.0344%" height="15" fill="rgb(208,32,45)" fg:x="17440" fg:w="6"/><text x="100.1355%" y="143.50"></text></g><g><title>trx`std::time::Instant::now (4 samples, 0.02%)</title><rect x="99.9198%" y="149" width="0.0229%" height="15" fill="rgb(207,135,9)" fg:x="17446" fg:w="4"/><text x="100.1698%" y="159.50"></text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::run (10,831 samples, 62.03%)</title><rect x="37.9439%" y="181" width="62.0332%" height="15" fill="rgb(206,86,44)" fg:x="6625" fg:w="10831"/><text x="38.1939%" y="191.50">trx`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::run_task (5,030 samples, 28.81%)</title><rect x="71.1684%" y="165" width="28.8087%" height="15" fill="rgb(245,177,15)" fg:x="12426" fg:w="5030"/><text x="71.4184%" y="175.50">trx`tokio::runtime::thread_pool::worker::Conte..</text></g><g><title>trx`tokio::runtime::task::raw::poll (5 samples, 0.03%)</title><rect x="99.9485%" y="149" width="0.0286%" height="15" fill="rgb(206,64,50)" fg:x="17451" fg:w="5"/><text x="100.1985%" y="159.50"></text></g><g><title>all (17,460 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="17460"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (10,866 samples, 62.23%)</title><rect x="37.7663%" y="341" width="62.2337%" height="15" fill="rgb(213,64,8)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (10,866 samples, 62.23%)</title><rect x="37.7663%" y="325" width="62.2337%" height="15" fill="rgb(210,75,36)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>trx`std::sys::unix::thread::Thread::new::thread_start (10,866 samples, 62.23%)</title><rect x="37.7663%" y="309" width="62.2337%" height="15" fill="rgb(229,88,21)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="319.50">trx`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>trx`core::ops::function::FnOnce::call_once{{vtable.shim}} (10,866 samples, 62.23%)</title><rect x="37.7663%" y="293" width="62.2337%" height="15" fill="rgb(252,204,47)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="303.50">trx`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (10,866 samples, 62.23%)</title><rect x="37.7663%" y="277" width="62.2337%" height="15" fill="rgb(208,77,27)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="287.50">trx`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>trx`tokio::runtime::blocking::pool::Inner::run (10,866 samples, 62.23%)</title><rect x="37.7663%" y="261" width="62.2337%" height="15" fill="rgb(221,76,26)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="271.50">trx`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>trx`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10,866 samples, 62.23%)</title><rect x="37.7663%" y="245" width="62.2337%" height="15" fill="rgb(225,139,18)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="255.50">trx`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>trx`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (10,866 samples, 62.23%)</title><rect x="37.7663%" y="229" width="62.2337%" height="15" fill="rgb(230,137,11)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="239.50">trx`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>trx`tokio::runtime::thread_pool::worker::run (10,866 samples, 62.23%)</title><rect x="37.7663%" y="213" width="62.2337%" height="15" fill="rgb(212,28,1)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="223.50">trx`tokio::runtime::thread_pool::worker::run</text></g><g><title>trx`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,866 samples, 62.23%)</title><rect x="37.7663%" y="197" width="62.2337%" height="15" fill="rgb(248,164,17)" fg:x="6594" fg:w="10866"/><text x="38.0163%" y="207.50">trx`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::run_task (4 samples, 0.02%)</title><rect x="99.9771%" y="181" width="0.0229%" height="15" fill="rgb(222,171,42)" fg:x="17456" fg:w="4"/><text x="100.2271%" y="191.50"></text></g></svg></svg>