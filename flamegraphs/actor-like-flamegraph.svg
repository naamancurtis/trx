<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="17074"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (5 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0293%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.03%)</title><rect x="0.0000%" y="341" width="0.0293%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="0.0293%" y="197" width="0.0117%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="2"/><text x="0.2793%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="0.0469%" y="197" width="0.0176%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="3"/><text x="0.2969%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="0.0703%" y="197" width="0.0234%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="4"/><text x="0.3203%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (24 samples, 0.14%)</title><rect x="1.2475%" y="181" width="0.1406%" height="15" fill="rgb(232,128,0)" fg:x="213" fg:w="24"/><text x="1.4975%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="1.3939%" y="181" width="0.0351%" height="15" fill="rgb(207,160,47)" fg:x="238" fg:w="6"/><text x="1.6439%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`calloc (13 samples, 0.08%)</title><rect x="1.4291%" y="181" width="0.0761%" height="15" fill="rgb(228,23,34)" fg:x="244" fg:w="13"/><text x="1.6791%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.07%)</title><rect x="1.5052%" y="181" width="0.0703%" height="15" fill="rgb(218,30,26)" fg:x="257" fg:w="12"/><text x="1.7552%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (67 samples, 0.39%)</title><rect x="1.8508%" y="165" width="0.3924%" height="15" fill="rgb(220,122,19)" fg:x="316" fg:w="67"/><text x="2.1008%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (115 samples, 0.67%)</title><rect x="1.5755%" y="181" width="0.6735%" height="15" fill="rgb(250,228,42)" fg:x="269" fg:w="115"/><text x="1.8255%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="2.2490%" y="181" width="0.0117%" height="15" fill="rgb(240,193,28)" fg:x="384" fg:w="2"/><text x="2.4990%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (22 samples, 0.13%)</title><rect x="2.2607%" y="181" width="0.1289%" height="15" fill="rgb(216,20,37)" fg:x="386" fg:w="22"/><text x="2.5107%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (70 samples, 0.41%)</title><rect x="2.3896%" y="181" width="0.4100%" height="15" fill="rgb(206,188,39)" fg:x="408" fg:w="70"/><text x="2.6396%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="2.7996%" y="181" width="0.0234%" height="15" fill="rgb(217,207,13)" fg:x="478" fg:w="4"/><text x="3.0496%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.06%)</title><rect x="2.8230%" y="181" width="0.0644%" height="15" fill="rgb(231,73,38)" fg:x="482" fg:w="11"/><text x="3.0730%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.06%)</title><rect x="2.8874%" y="181" width="0.0644%" height="15" fill="rgb(225,20,46)" fg:x="493" fg:w="11"/><text x="3.1374%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.18%)</title><rect x="2.9519%" y="181" width="0.1757%" height="15" fill="rgb(210,31,41)" fg:x="504" fg:w="30"/><text x="3.2019%" y="191.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.01%)</title><rect x="3.1276%" y="181" width="0.0117%" height="15" fill="rgb(221,200,47)" fg:x="534" fg:w="2"/><text x="3.3776%" y="191.50"></text></g><g><title>trx`tokio::runtime::task::waker::wake_by_val (2 samples, 0.01%)</title><rect x="3.4731%" y="165" width="0.0117%" height="15" fill="rgb(226,26,5)" fg:x="593" fg:w="2"/><text x="3.7231%" y="175.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="5.0076%" y="149" width="0.0176%" height="15" fill="rgb(249,33,26)" fg:x="855" fg:w="3"/><text x="5.2576%" y="159.50"></text></g><g><title>trx`tokio::runtime::task::raw::RawTask::from_raw (3 samples, 0.02%)</title><rect x="5.0252%" y="149" width="0.0176%" height="15" fill="rgb(235,183,28)" fg:x="858" fg:w="3"/><text x="5.2752%" y="159.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_dec (7 samples, 0.04%)</title><rect x="5.0428%" y="149" width="0.0410%" height="15" fill="rgb(221,5,38)" fg:x="861" fg:w="7"/><text x="5.2928%" y="159.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.02%)</title><rect x="5.0838%" y="149" width="0.0176%" height="15" fill="rgb(247,18,42)" fg:x="868" fg:w="3"/><text x="5.3338%" y="159.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_dec (24 samples, 0.14%)</title><rect x="5.1657%" y="133" width="0.1406%" height="15" fill="rgb(241,131,45)" fg:x="882" fg:w="24"/><text x="5.4157%" y="143.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_notified_by_val (49 samples, 0.29%)</title><rect x="5.3063%" y="133" width="0.2870%" height="15" fill="rgb(249,31,29)" fg:x="906" fg:w="49"/><text x="5.5563%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.01%)</title><rect x="5.8334%" y="85" width="0.0117%" height="15" fill="rgb(225,111,53)" fg:x="996" fg:w="2"/><text x="6.0834%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5 samples, 0.03%)</title><rect x="5.8451%" y="85" width="0.0293%" height="15" fill="rgb(238,160,17)" fg:x="998" fg:w="5"/><text x="6.0951%" y="95.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Unparker as tokio::park::Unpark&gt;::unpark (41 samples, 0.24%)</title><rect x="5.6402%" y="117" width="0.2401%" height="15" fill="rgb(214,148,48)" fg:x="963" fg:w="41"/><text x="5.8902%" y="127.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (14 samples, 0.08%)</title><rect x="5.7983%" y="101" width="0.0820%" height="15" fill="rgb(232,36,49)" fg:x="990" fg:w="14"/><text x="6.0483%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (340 samples, 1.99%)</title><rect x="5.9681%" y="101" width="1.9913%" height="15" fill="rgb(209,103,24)" fg:x="1019" fg:w="340"/><text x="6.2181%" y="111.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.02%)</title><rect x="7.9595%" y="101" width="0.0176%" height="15" fill="rgb(229,88,8)" fg:x="1359" fg:w="3"/><text x="8.2095%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (10 samples, 0.06%)</title><rect x="7.9770%" y="101" width="0.0586%" height="15" fill="rgb(213,181,19)" fg:x="1362" fg:w="10"/><text x="8.2270%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (9 samples, 0.05%)</title><rect x="7.9829%" y="85" width="0.0527%" height="15" fill="rgb(254,191,54)" fg:x="1363" fg:w="9"/><text x="8.2329%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (21 samples, 0.12%)</title><rect x="8.0356%" y="101" width="0.1230%" height="15" fill="rgb(241,83,37)" fg:x="1372" fg:w="21"/><text x="8.2856%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (6 samples, 0.04%)</title><rect x="8.1235%" y="85" width="0.0351%" height="15" fill="rgb(233,36,39)" fg:x="1387" fg:w="6"/><text x="8.3735%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (23 samples, 0.13%)</title><rect x="8.1586%" y="101" width="0.1347%" height="15" fill="rgb(226,3,54)" fg:x="1393" fg:w="23"/><text x="8.4086%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="8.2933%" y="101" width="0.0176%" height="15" fill="rgb(245,192,40)" fg:x="1416" fg:w="3"/><text x="8.5433%" y="111.50"></text></g><g><title>trx`parking_lot::condvar::Condvar::notify_one_slow (421 samples, 2.47%)</title><rect x="5.8803%" y="117" width="2.4657%" height="15" fill="rgb(238,167,29)" fg:x="1004" fg:w="421"/><text x="6.1303%" y="127.50">tr..</text></g><g><title>trx`parking_lot_core::parking_lot::lock_bucket_pair (6 samples, 0.04%)</title><rect x="8.3109%" y="101" width="0.0351%" height="15" fill="rgb(232,182,51)" fg:x="1419" fg:w="6"/><text x="8.5609%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.02%)</title><rect x="8.4222%" y="101" width="0.0234%" height="15" fill="rgb(231,60,39)" fg:x="1438" fg:w="4"/><text x="8.6722%" y="111.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.01%)</title><rect x="8.4456%" y="101" width="0.0117%" height="15" fill="rgb(208,69,12)" fg:x="1442" fg:w="2"/><text x="8.6956%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.01%)</title><rect x="8.4456%" y="85" width="0.0117%" height="15" fill="rgb(235,93,37)" fg:x="1442" fg:w="2"/><text x="8.6956%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (7 samples, 0.04%)</title><rect x="9.4354%" y="69" width="0.0410%" height="15" fill="rgb(213,116,39)" fg:x="1611" fg:w="7"/><text x="9.6854%" y="79.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (82 samples, 0.48%)</title><rect x="9.1894%" y="85" width="0.4803%" height="15" fill="rgb(222,207,29)" fg:x="1569" fg:w="82"/><text x="9.4394%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (33 samples, 0.19%)</title><rect x="9.4764%" y="69" width="0.1933%" height="15" fill="rgb(206,96,30)" fg:x="1618" fg:w="33"/><text x="9.7264%" y="79.50"></text></g><g><title>trx`tokio::runtime::task::inject::Inject&lt;T&gt;::push (208 samples, 1.22%)</title><rect x="8.4573%" y="101" width="1.2182%" height="15" fill="rgb(218,138,4)" fg:x="1444" fg:w="208"/><text x="8.7073%" y="111.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (132 samples, 0.77%)</title><rect x="9.6755%" y="101" width="0.7731%" height="15" fill="rgb(250,191,14)" fg:x="1652" fg:w="132"/><text x="9.9255%" y="111.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.05%)</title><rect x="10.4018%" y="85" width="0.0469%" height="15" fill="rgb(239,60,40)" fg:x="1776" fg:w="8"/><text x="10.6518%" y="95.50"></text></g><g><title>trx`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (360 samples, 2.11%)</title><rect x="8.3460%" y="117" width="2.1085%" height="15" fill="rgb(206,27,48)" fg:x="1425" fg:w="360"/><text x="8.5960%" y="127.50">t..</text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (2 samples, 0.01%)</title><rect x="10.4545%" y="117" width="0.0117%" height="15" fill="rgb(225,35,8)" fg:x="1785" fg:w="2"/><text x="10.7045%" y="127.50"></text></g><g><title>trx`tokio::runtime::task::waker::wake_by_val (918 samples, 5.38%)</title><rect x="5.1013%" y="149" width="5.3766%" height="15" fill="rgb(250,213,24)" fg:x="871" fg:w="918"/><text x="5.3513%" y="159.50">trx`tok..</text></g><g><title>trx`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::schedule (834 samples, 4.88%)</title><rect x="5.5933%" y="133" width="4.8846%" height="15" fill="rgb(247,123,22)" fg:x="955" fg:w="834"/><text x="5.8433%" y="143.50">trx`to..</text></g><g><title>trx`tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (2 samples, 0.01%)</title><rect x="10.4662%" y="117" width="0.0117%" height="15" fill="rgb(231,138,38)" fg:x="1787" fg:w="2"/><text x="10.7162%" y="127.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (257 samples, 1.51%)</title><rect x="10.4838%" y="149" width="1.5052%" height="15" fill="rgb(231,145,46)" fg:x="1790" fg:w="257"/><text x="10.7338%" y="159.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (25 samples, 0.15%)</title><rect x="11.8426%" y="133" width="0.1464%" height="15" fill="rgb(251,118,11)" fg:x="2022" fg:w="25"/><text x="12.0926%" y="143.50"></text></g><g><title>trx`tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (1,530 samples, 8.96%)</title><rect x="3.4848%" y="165" width="8.9610%" height="15" fill="rgb(217,147,25)" fg:x="595" fg:w="1530"/><text x="3.7348%" y="175.50">trx`tokio::sy..</text></g><g><title>trx`tokio::sync::task::atomic_waker::AtomicWaker::wake (78 samples, 0.46%)</title><rect x="11.9890%" y="149" width="0.4568%" height="15" fill="rgb(247,81,37)" fg:x="2047" fg:w="78"/><text x="12.2390%" y="159.50"></text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,591 samples, 9.32%)</title><rect x="3.1393%" y="181" width="9.3183%" height="15" fill="rgb(209,12,38)" fg:x="536" fg:w="1591"/><text x="3.3893%" y="191.50">trx`&lt;core::fu..</text></g><g><title>trx`tokio::sync::task::atomic_waker::AtomicWaker::wake (2 samples, 0.01%)</title><rect x="12.4458%" y="165" width="0.0117%" height="15" fill="rgb(227,1,9)" fg:x="2125" fg:w="2"/><text x="12.6958%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (97 samples, 0.57%)</title><rect x="12.5161%" y="165" width="0.5681%" height="15" fill="rgb(248,47,43)" fg:x="2137" fg:w="97"/><text x="12.7661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (85 samples, 0.50%)</title><rect x="12.5864%" y="149" width="0.4978%" height="15" fill="rgb(221,10,30)" fg:x="2149" fg:w="85"/><text x="12.8364%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (79 samples, 0.46%)</title><rect x="12.6215%" y="133" width="0.4627%" height="15" fill="rgb(210,229,1)" fg:x="2155" fg:w="79"/><text x="12.8715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.22%)</title><rect x="12.8617%" y="117" width="0.2226%" height="15" fill="rgb(222,148,37)" fg:x="2196" fg:w="38"/><text x="13.1117%" y="127.50"></text></g><g><title>trx`&lt;lib::engines::actor_like::ActorLikeEngine as lib::engines::AsyncEngine&gt;::publish_transaction (110 samples, 0.64%)</title><rect x="12.4575%" y="181" width="0.6443%" height="15" fill="rgb(234,67,33)" fg:x="2127" fg:w="110"/><text x="12.7075%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="13.0842%" y="165" width="0.0176%" height="15" fill="rgb(247,98,35)" fg:x="2234" fg:w="3"/><text x="13.3342%" y="175.50"></text></g><g><title>trx`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="13.1018%" y="181" width="0.0176%" height="15" fill="rgb(247,138,52)" fg:x="2237" fg:w="3"/><text x="13.3518%" y="191.50"></text></g><g><title>trx`__rdl_alloc (9 samples, 0.05%)</title><rect x="13.1194%" y="181" width="0.0527%" height="15" fill="rgb(213,79,30)" fg:x="2240" fg:w="9"/><text x="13.3694%" y="191.50"></text></g><g><title>trx`__rdl_alloc_zeroed (13 samples, 0.08%)</title><rect x="13.1721%" y="181" width="0.0761%" height="15" fill="rgb(246,177,23)" fg:x="2249" fg:w="13"/><text x="13.4221%" y="191.50"></text></g><g><title>trx`__rdl_dealloc (10 samples, 0.06%)</title><rect x="13.2482%" y="181" width="0.0586%" height="15" fill="rgb(230,62,27)" fg:x="2262" fg:w="10"/><text x="13.4982%" y="191.50"></text></g><g><title>trx`__rust_alloc_zeroed (7 samples, 0.04%)</title><rect x="13.3126%" y="181" width="0.0410%" height="15" fill="rgb(216,154,8)" fg:x="2273" fg:w="7"/><text x="13.5626%" y="191.50"></text></g><g><title>trx`__rust_dealloc (4 samples, 0.02%)</title><rect x="13.3536%" y="181" width="0.0234%" height="15" fill="rgb(244,35,45)" fg:x="2280" fg:w="4"/><text x="13.6036%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.05%)</title><rect x="13.4298%" y="165" width="0.0469%" height="15" fill="rgb(251,115,12)" fg:x="2293" fg:w="8"/><text x="13.6798%" y="175.50"></text></g><g><title>trx`__rdl_realloc (2 samples, 0.01%)</title><rect x="13.4766%" y="165" width="0.0117%" height="15" fill="rgb(240,54,50)" fg:x="2301" fg:w="2"/><text x="13.7266%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="13.5293%" y="149" width="0.0234%" height="15" fill="rgb(233,84,52)" fg:x="2310" fg:w="4"/><text x="13.7793%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.02%)</title><rect x="13.6172%" y="133" width="0.0176%" height="15" fill="rgb(207,117,47)" fg:x="2325" fg:w="3"/><text x="13.8672%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.15%)</title><rect x="13.7050%" y="117" width="0.1523%" height="15" fill="rgb(249,43,39)" fg:x="2340" fg:w="26"/><text x="13.9550%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (8 samples, 0.05%)</title><rect x="13.9393%" y="101" width="0.0469%" height="15" fill="rgb(209,38,44)" fg:x="2380" fg:w="8"/><text x="14.1893%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (26 samples, 0.15%)</title><rect x="13.9862%" y="101" width="0.1523%" height="15" fill="rgb(236,212,23)" fg:x="2388" fg:w="26"/><text x="14.2362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (72 samples, 0.42%)</title><rect x="14.1385%" y="101" width="0.4217%" height="15" fill="rgb(242,79,21)" fg:x="2414" fg:w="72"/><text x="14.3885%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (72 samples, 0.42%)</title><rect x="14.1385%" y="85" width="0.4217%" height="15" fill="rgb(211,96,35)" fg:x="2414" fg:w="72"/><text x="14.3885%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (47 samples, 0.28%)</title><rect x="14.2849%" y="69" width="0.2753%" height="15" fill="rgb(253,215,40)" fg:x="2439" fg:w="47"/><text x="14.5349%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (33 samples, 0.19%)</title><rect x="14.5601%" y="101" width="0.1933%" height="15" fill="rgb(211,81,21)" fg:x="2486" fg:w="33"/><text x="14.8101%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (155 samples, 0.91%)</title><rect x="13.8573%" y="117" width="0.9078%" height="15" fill="rgb(208,190,38)" fg:x="2366" fg:w="155"/><text x="14.1073%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="14.7534%" y="101" width="0.0117%" height="15" fill="rgb(235,213,38)" fg:x="2519" fg:w="2"/><text x="15.0034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (197 samples, 1.15%)</title><rect x="13.6348%" y="133" width="1.1538%" height="15" fill="rgb(237,122,38)" fg:x="2328" fg:w="197"/><text x="13.8848%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="14.7651%" y="117" width="0.0234%" height="15" fill="rgb(244,218,35)" fg:x="2521" fg:w="4"/><text x="15.0151%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (53 samples, 0.31%)</title><rect x="14.7886%" y="133" width="0.3104%" height="15" fill="rgb(240,68,47)" fg:x="2525" fg:w="53"/><text x="15.0386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (265 samples, 1.55%)</title><rect x="13.5528%" y="149" width="1.5521%" height="15" fill="rgb(210,16,53)" fg:x="2314" fg:w="265"/><text x="13.8028%" y="159.50"></text></g><g><title>trx`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (299 samples, 1.75%)</title><rect x="13.3771%" y="181" width="1.7512%" height="15" fill="rgb(235,124,12)" fg:x="2284" fg:w="299"/><text x="13.6271%" y="191.50"></text></g><g><title>trx`alloc::raw_vec::finish_grow (279 samples, 1.63%)</title><rect x="13.4942%" y="165" width="1.6341%" height="15" fill="rgb(224,169,11)" fg:x="2304" fg:w="279"/><text x="13.7442%" y="175.50"></text></g><g><title>trx`__rdl_realloc (4 samples, 0.02%)</title><rect x="15.1048%" y="149" width="0.0234%" height="15" fill="rgb(250,166,2)" fg:x="2579" fg:w="4"/><text x="15.3548%" y="159.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_fwd (2 samples, 0.01%)</title><rect x="15.1341%" y="181" width="0.0117%" height="15" fill="rgb(242,216,29)" fg:x="2584" fg:w="2"/><text x="15.3841%" y="191.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (11 samples, 0.06%)</title><rect x="15.1458%" y="181" width="0.0644%" height="15" fill="rgb(230,116,27)" fg:x="2586" fg:w="11"/><text x="15.3958%" y="191.50"></text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (8 samples, 0.05%)</title><rect x="15.2103%" y="181" width="0.0469%" height="15" fill="rgb(228,99,48)" fg:x="2597" fg:w="8"/><text x="15.4603%" y="191.50"></text></g><g><title>trx`csv::Trim::should_trim_fields (6 samples, 0.04%)</title><rect x="15.2571%" y="181" width="0.0351%" height="15" fill="rgb(253,11,6)" fg:x="2605" fg:w="6"/><text x="15.5071%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="16.5398%" y="149" width="0.0176%" height="15" fill="rgb(247,143,39)" fg:x="2824" fg:w="3"/><text x="16.7898%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (95 samples, 0.56%)</title><rect x="17.4124%" y="117" width="0.5564%" height="15" fill="rgb(236,97,10)" fg:x="2973" fg:w="95"/><text x="17.6624%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (9 samples, 0.05%)</title><rect x="17.9688%" y="117" width="0.0527%" height="15" fill="rgb(233,208,19)" fg:x="3068" fg:w="9"/><text x="18.2188%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (228 samples, 1.34%)</title><rect x="16.7155%" y="133" width="1.3354%" height="15" fill="rgb(216,164,2)" fg:x="2854" fg:w="228"/><text x="16.9655%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="18.0216%" y="117" width="0.0293%" height="15" fill="rgb(220,129,5)" fg:x="3077" fg:w="5"/><text x="18.2716%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="18.0508%" y="133" width="0.0234%" height="15" fill="rgb(242,17,10)" fg:x="3082" fg:w="4"/><text x="18.3008%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (5 samples, 0.03%)</title><rect x="18.0743%" y="133" width="0.0293%" height="15" fill="rgb(242,107,0)" fg:x="3086" fg:w="5"/><text x="18.3243%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (301 samples, 1.76%)</title><rect x="16.3699%" y="165" width="1.7629%" height="15" fill="rgb(251,28,31)" fg:x="2795" fg:w="301"/><text x="16.6199%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (269 samples, 1.58%)</title><rect x="16.5573%" y="149" width="1.5755%" height="15" fill="rgb(233,223,10)" fg:x="2827" fg:w="269"/><text x="16.8073%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="18.1035%" y="133" width="0.0293%" height="15" fill="rgb(215,21,27)" fg:x="3091" fg:w="5"/><text x="18.3535%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (120 samples, 0.70%)</title><rect x="18.3203%" y="133" width="0.7028%" height="15" fill="rgb(232,23,21)" fg:x="3128" fg:w="120"/><text x="18.5703%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (64 samples, 0.37%)</title><rect x="18.6482%" y="117" width="0.3748%" height="15" fill="rgb(244,5,23)" fg:x="3184" fg:w="64"/><text x="18.8982%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (154 samples, 0.90%)</title><rect x="18.1328%" y="165" width="0.9020%" height="15" fill="rgb(226,81,46)" fg:x="3096" fg:w="154"/><text x="18.3828%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (134 samples, 0.78%)</title><rect x="18.2500%" y="149" width="0.7848%" height="15" fill="rgb(247,70,30)" fg:x="3116" fg:w="134"/><text x="18.5000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="19.0231%" y="133" width="0.0117%" height="15" fill="rgb(212,68,19)" fg:x="3248" fg:w="2"/><text x="19.2731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (11 samples, 0.06%)</title><rect x="19.0348%" y="165" width="0.0644%" height="15" fill="rgb(240,187,13)" fg:x="3250" fg:w="11"/><text x="19.2848%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="19.0992%" y="165" width="0.0117%" height="15" fill="rgb(223,113,26)" fg:x="3261" fg:w="2"/><text x="19.3492%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (162 samples, 0.95%)</title><rect x="19.5385%" y="149" width="0.9488%" height="15" fill="rgb(206,192,2)" fg:x="3336" fg:w="162"/><text x="19.7885%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (247 samples, 1.45%)</title><rect x="19.1109%" y="165" width="1.4466%" height="15" fill="rgb(241,108,4)" fg:x="3263" fg:w="247"/><text x="19.3609%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.07%)</title><rect x="20.4873%" y="149" width="0.0703%" height="15" fill="rgb(247,173,49)" fg:x="3498" fg:w="12"/><text x="20.7373%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.02%)</title><rect x="20.5576%" y="165" width="0.0176%" height="15" fill="rgb(224,114,35)" fg:x="3510" fg:w="3"/><text x="20.8076%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.19%)</title><rect x="20.5751%" y="165" width="0.1874%" height="15" fill="rgb(245,159,27)" fg:x="3513" fg:w="32"/><text x="20.8251%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (219 samples, 1.28%)</title><rect x="20.7626%" y="165" width="1.2827%" height="15" fill="rgb(245,172,44)" fg:x="3545" fg:w="219"/><text x="21.0126%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="22.0452%" y="165" width="0.0234%" height="15" fill="rgb(236,23,11)" fg:x="3764" fg:w="4"/><text x="22.2952%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.29%)</title><rect x="22.0686%" y="165" width="0.2870%" height="15" fill="rgb(205,117,38)" fg:x="3768" fg:w="49"/><text x="22.3186%" y="175.50"></text></g><g><title>trx`__rdl_alloc_zeroed (10 samples, 0.06%)</title><rect x="22.3556%" y="165" width="0.0586%" height="15" fill="rgb(237,72,25)" fg:x="3817" fg:w="10"/><text x="22.6056%" y="175.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_fwd (80 samples, 0.47%)</title><rect x="22.4142%" y="165" width="0.4685%" height="15" fill="rgb(244,70,9)" fg:x="3827" fg:w="80"/><text x="22.6642%" y="175.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (102 samples, 0.60%)</title><rect x="22.8827%" y="165" width="0.5974%" height="15" fill="rgb(217,125,39)" fg:x="3907" fg:w="102"/><text x="23.1327%" y="175.50"></text></g><g><title>trx`regex_automata::dfa::DFA::rfind_at (50 samples, 0.29%)</title><rect x="23.1873%" y="149" width="0.2928%" height="15" fill="rgb(235,36,10)" fg:x="3959" fg:w="50"/><text x="23.4373%" y="159.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::trim (1,399 samples, 8.19%)</title><rect x="15.2923%" y="181" width="8.1937%" height="15" fill="rgb(251,123,47)" fg:x="2611" fg:w="1399"/><text x="15.5423%" y="191.50">trx`csv::by..</text></g><g><title>trx`csv::byte_record::ByteRecord::validate (26 samples, 0.15%)</title><rect x="23.4860%" y="181" width="0.1523%" height="15" fill="rgb(221,13,13)" fg:x="4010" fg:w="26"/><text x="23.7360%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="24.8507%" y="133" width="0.0117%" height="15" fill="rgb(238,131,9)" fg:x="4243" fg:w="2"/><text x="25.1007%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="24.8682%" y="133" width="0.0117%" height="15" fill="rgb(211,50,8)" fg:x="4246" fg:w="2"/><text x="25.1182%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="24.8799%" y="133" width="0.0117%" height="15" fill="rgb(245,182,24)" fg:x="4248" fg:w="2"/><text x="25.1299%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.04%)</title><rect x="24.9034%" y="133" width="0.0351%" height="15" fill="rgb(242,14,37)" fg:x="4252" fg:w="6"/><text x="25.1534%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (129 samples, 0.76%)</title><rect x="25.4246%" y="85" width="0.7555%" height="15" fill="rgb(246,228,12)" fg:x="4341" fg:w="129"/><text x="25.6746%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (64 samples, 0.37%)</title><rect x="25.8053%" y="69" width="0.3748%" height="15" fill="rgb(213,55,15)" fg:x="4406" fg:w="64"/><text x="26.0553%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (150 samples, 0.88%)</title><rect x="25.3075%" y="117" width="0.8785%" height="15" fill="rgb(209,9,3)" fg:x="4321" fg:w="150"/><text x="25.5575%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (139 samples, 0.81%)</title><rect x="25.3719%" y="101" width="0.8141%" height="15" fill="rgb(230,59,30)" fg:x="4332" fg:w="139"/><text x="25.6219%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.04%)</title><rect x="26.1860%" y="117" width="0.0410%" height="15" fill="rgb(209,121,21)" fg:x="4471" fg:w="7"/><text x="26.4360%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (45 samples, 0.26%)</title><rect x="26.3793%" y="101" width="0.2636%" height="15" fill="rgb(220,109,13)" fg:x="4504" fg:w="45"/><text x="26.6293%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.43%)</title><rect x="26.2270%" y="117" width="0.4276%" height="15" fill="rgb(232,18,1)" fg:x="4478" fg:w="73"/><text x="26.4770%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="26.6428%" y="101" width="0.0117%" height="15" fill="rgb(215,41,42)" fg:x="4549" fg:w="2"/><text x="26.8928%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.05%)</title><rect x="26.6546%" y="117" width="0.0527%" height="15" fill="rgb(224,123,36)" fg:x="4551" fg:w="9"/><text x="26.9046%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (49 samples, 0.29%)</title><rect x="26.7073%" y="117" width="0.2870%" height="15" fill="rgb(240,125,3)" fg:x="4560" fg:w="49"/><text x="26.9573%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.05%)</title><rect x="27.0060%" y="117" width="0.0469%" height="15" fill="rgb(205,98,50)" fg:x="4611" fg:w="8"/><text x="27.2560%" y="127.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (30 samples, 0.18%)</title><rect x="27.2051%" y="85" width="0.1757%" height="15" fill="rgb(205,185,37)" fg:x="4645" fg:w="30"/><text x="27.4551%" y="95.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (43 samples, 0.25%)</title><rect x="27.1583%" y="101" width="0.2518%" height="15" fill="rgb(238,207,15)" fg:x="4637" fg:w="43"/><text x="27.4083%" y="111.50"></text></g><g><title>trx`rust_decimal::str::handle_point (5 samples, 0.03%)</title><rect x="27.3808%" y="85" width="0.0293%" height="15" fill="rgb(213,199,42)" fg:x="4675" fg:w="5"/><text x="27.6308%" y="95.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::from_str_exact (63 samples, 0.37%)</title><rect x="27.0528%" y="117" width="0.3690%" height="15" fill="rgb(235,201,11)" fg:x="4619" fg:w="63"/><text x="27.3028%" y="127.50"></text></g><g><title>trx`rust_decimal::str::handle_point (2 samples, 0.01%)</title><rect x="27.4101%" y="101" width="0.0117%" height="15" fill="rgb(207,46,11)" fg:x="4680" fg:w="2"/><text x="27.6601%" y="111.50"></text></g><g><title>trx`&lt;lib::amount::Amount as serde::de::Deserialize&gt;::deserialize (713 samples, 4.18%)</title><rect x="24.9385%" y="133" width="4.1759%" height="15" fill="rgb(241,35,35)" fg:x="4258" fg:w="713"/><text x="25.1885%" y="143.50">trx`&lt;..</text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp (289 samples, 1.69%)</title><rect x="27.4218%" y="117" width="1.6926%" height="15" fill="rgb(243,32,47)" fg:x="4682" fg:w="289"/><text x="27.6718%" y="127.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp_with_strategy (287 samples, 1.68%)</title><rect x="27.4335%" y="101" width="1.6809%" height="15" fill="rgb(247,202,23)" fg:x="4684" fg:w="287"/><text x="27.6835%" y="111.50"></text></g><g><title>trx`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="29.1144%" y="133" width="0.0117%" height="15" fill="rgb(219,102,11)" fg:x="4971" fg:w="2"/><text x="29.3644%" y="143.50"></text></g><g><title>trx`__rdl_alloc (2 samples, 0.01%)</title><rect x="29.1262%" y="133" width="0.0117%" height="15" fill="rgb(243,110,44)" fg:x="4973" fg:w="2"/><text x="29.3762%" y="143.50"></text></g><g><title>trx`__rust_dealloc (2 samples, 0.01%)</title><rect x="29.1496%" y="133" width="0.0117%" height="15" fill="rgb(222,74,54)" fg:x="4977" fg:w="2"/><text x="29.3996%" y="143.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (769 samples, 4.50%)</title><rect x="24.6632%" y="149" width="4.5039%" height="15" fill="rgb(216,99,12)" fg:x="4211" fg:w="769"/><text x="24.9132%" y="159.50">trx`&lt;..</text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u16&gt;::from_str (25 samples, 0.15%)</title><rect x="29.5888%" y="133" width="0.1464%" height="15" fill="rgb(226,22,26)" fg:x="5052" fg:w="25"/><text x="29.8388%" y="143.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (140 samples, 0.82%)</title><rect x="29.1730%" y="149" width="0.8200%" height="15" fill="rgb(217,163,10)" fg:x="4981" fg:w="140"/><text x="29.4230%" y="159.50"></text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (44 samples, 0.26%)</title><rect x="29.7353%" y="133" width="0.2577%" height="15" fill="rgb(213,25,53)" fg:x="5077" fg:w="44"/><text x="29.9853%" y="143.50"></text></g><g><title>trx`&lt;lib::amount::Amount as serde::de::Deserialize&gt;::deserialize (2 samples, 0.01%)</title><rect x="29.9930%" y="149" width="0.0117%" height="15" fill="rgb(252,105,26)" fg:x="5121" fg:w="2"/><text x="30.2430%" y="159.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (18 samples, 0.11%)</title><rect x="30.0047%" y="149" width="0.1054%" height="15" fill="rgb(220,39,43)" fg:x="5123" fg:w="18"/><text x="30.2547%" y="159.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (63 samples, 0.37%)</title><rect x="30.1570%" y="133" width="0.3690%" height="15" fill="rgb(229,68,48)" fg:x="5149" fg:w="63"/><text x="30.4070%" y="143.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (40 samples, 0.23%)</title><rect x="30.2917%" y="117" width="0.2343%" height="15" fill="rgb(252,8,32)" fg:x="5172" fg:w="40"/><text x="30.5417%" y="127.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (74 samples, 0.43%)</title><rect x="30.1101%" y="149" width="0.4334%" height="15" fill="rgb(223,20,43)" fg:x="5141" fg:w="74"/><text x="30.3601%" y="159.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.02%)</title><rect x="30.5259%" y="133" width="0.0176%" height="15" fill="rgb(229,81,49)" fg:x="5212" fg:w="3"/><text x="30.7759%" y="143.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,130 samples, 6.62%)</title><rect x="23.9428%" y="165" width="6.6182%" height="15" fill="rgb(236,28,36)" fg:x="4088" fg:w="1130"/><text x="24.1928%" y="175.50">trx`&lt;&amp;mut..</text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (3 samples, 0.02%)</title><rect x="30.5435%" y="149" width="0.0176%" height="15" fill="rgb(249,185,26)" fg:x="5215" fg:w="3"/><text x="30.7935%" y="159.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.03%)</title><rect x="30.5611%" y="165" width="0.0293%" height="15" fill="rgb(249,174,33)" fg:x="5218" fg:w="5"/><text x="30.8111%" y="175.50"></text></g><g><title>trx`csv::deserializer::deserialize_string_record (1,191 samples, 6.98%)</title><rect x="23.6383%" y="181" width="6.9755%" height="15" fill="rgb(233,201,37)" fg:x="4036" fg:w="1191"/><text x="23.8883%" y="191.50">trx`csv::..</text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (4 samples, 0.02%)</title><rect x="30.5904%" y="165" width="0.0234%" height="15" fill="rgb(221,78,26)" fg:x="5223" fg:w="4"/><text x="30.8404%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="32.1542%" y="149" width="0.0234%" height="15" fill="rgb(250,127,30)" fg:x="5490" fg:w="4"/><text x="32.4042%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (99 samples, 0.58%)</title><rect x="32.9097%" y="117" width="0.5798%" height="15" fill="rgb(230,49,44)" fg:x="5619" fg:w="99"/><text x="33.1597%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (19 samples, 0.11%)</title><rect x="33.4895%" y="117" width="0.1113%" height="15" fill="rgb(229,67,23)" fg:x="5718" fg:w="19"/><text x="33.7395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (223 samples, 1.31%)</title><rect x="32.3064%" y="133" width="1.3061%" height="15" fill="rgb(249,83,47)" fg:x="5516" fg:w="223"/><text x="32.5564%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="33.6008%" y="117" width="0.0117%" height="15" fill="rgb(215,43,3)" fg:x="5737" fg:w="2"/><text x="33.8508%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="33.6125%" y="133" width="0.0117%" height="15" fill="rgb(238,154,13)" fg:x="5739" fg:w="2"/><text x="33.8625%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (276 samples, 1.62%)</title><rect x="32.0136%" y="165" width="1.6165%" height="15" fill="rgb(219,56,2)" fg:x="5466" fg:w="276"/><text x="32.2636%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (248 samples, 1.45%)</title><rect x="32.1776%" y="149" width="1.4525%" height="15" fill="rgb(233,0,4)" fg:x="5494" fg:w="248"/><text x="32.4276%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.67%)</title><rect x="33.7648%" y="133" width="0.6735%" height="15" fill="rgb(235,30,7)" fg:x="5765" fg:w="115"/><text x="34.0148%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (55 samples, 0.32%)</title><rect x="34.1162%" y="117" width="0.3221%" height="15" fill="rgb(250,79,13)" fg:x="5825" fg:w="55"/><text x="34.3662%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (139 samples, 0.81%)</title><rect x="33.6301%" y="165" width="0.8141%" height="15" fill="rgb(211,146,34)" fg:x="5742" fg:w="139"/><text x="33.8801%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (125 samples, 0.73%)</title><rect x="33.7121%" y="149" width="0.7321%" height="15" fill="rgb(228,22,38)" fg:x="5756" fg:w="125"/><text x="33.9621%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (3 samples, 0.02%)</title><rect x="34.4442%" y="165" width="0.0176%" height="15" fill="rgb(235,168,5)" fg:x="5881" fg:w="3"/><text x="34.6942%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="34.4618%" y="165" width="0.0117%" height="15" fill="rgb(221,155,16)" fg:x="5884" fg:w="2"/><text x="34.7118%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (135 samples, 0.79%)</title><rect x="34.8249%" y="149" width="0.7907%" height="15" fill="rgb(215,215,53)" fg:x="5946" fg:w="135"/><text x="35.0749%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (205 samples, 1.20%)</title><rect x="34.4735%" y="165" width="1.2007%" height="15" fill="rgb(223,4,10)" fg:x="5886" fg:w="205"/><text x="34.7235%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.06%)</title><rect x="35.6156%" y="149" width="0.0586%" height="15" fill="rgb(234,103,6)" fg:x="6081" fg:w="10"/><text x="35.8656%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="35.6741%" y="165" width="0.0117%" height="15" fill="rgb(227,97,0)" fg:x="6091" fg:w="2"/><text x="35.9241%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (35 samples, 0.20%)</title><rect x="35.6858%" y="165" width="0.2050%" height="15" fill="rgb(234,150,53)" fg:x="6093" fg:w="35"/><text x="35.9358%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (192 samples, 1.12%)</title><rect x="35.8908%" y="165" width="1.1245%" height="15" fill="rgb(228,201,54)" fg:x="6128" fg:w="192"/><text x="36.1408%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.02%)</title><rect x="37.0153%" y="165" width="0.0234%" height="15" fill="rgb(222,22,37)" fg:x="6320" fg:w="4"/><text x="37.2653%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (56 samples, 0.33%)</title><rect x="37.0388%" y="165" width="0.3280%" height="15" fill="rgb(237,53,32)" fg:x="6324" fg:w="56"/><text x="37.2888%" y="175.50"></text></g><g><title>trx`__rdl_alloc_zeroed (10 samples, 0.06%)</title><rect x="37.3668%" y="165" width="0.0586%" height="15" fill="rgb(233,25,53)" fg:x="6380" fg:w="10"/><text x="37.6168%" y="175.50"></text></g><g><title>trx`csv::string_record::StringRecord::trim (1,239 samples, 7.26%)</title><rect x="30.6138%" y="181" width="7.2566%" height="15" fill="rgb(210,40,34)" fg:x="5227" fg:w="1239"/><text x="30.8638%" y="191.50">trx`csv::s..</text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (76 samples, 0.45%)</title><rect x="37.4253%" y="165" width="0.4451%" height="15" fill="rgb(241,220,44)" fg:x="6390" fg:w="76"/><text x="37.6753%" y="175.50"></text></g><g><title>trx`csv::writer::Writer&lt;W&gt;::serialize (11 samples, 0.06%)</title><rect x="37.8704%" y="181" width="0.0644%" height="15" fill="rgb(235,28,35)" fg:x="6466" fg:w="11"/><text x="38.1204%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.06%)</title><rect x="37.8704%" y="165" width="0.0644%" height="15" fill="rgb(210,56,17)" fg:x="6466" fg:w="11"/><text x="38.1204%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.06%)</title><rect x="37.8704%" y="149" width="0.0644%" height="15" fill="rgb(224,130,29)" fg:x="6466" fg:w="11"/><text x="38.1204%" y="159.50"></text></g><g><title>trx`csv_core::reader::Reader::line (3 samples, 0.02%)</title><rect x="37.9349%" y="181" width="0.0176%" height="15" fill="rgb(235,212,8)" fg:x="6477" fg:w="3"/><text x="38.1849%" y="191.50"></text></g><g><title>trx`csv_core::reader::Reader::read_record (313 samples, 1.83%)</title><rect x="37.9524%" y="181" width="1.8332%" height="15" fill="rgb(223,33,50)" fg:x="6480" fg:w="313"/><text x="38.2024%" y="191.50">t..</text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,778 samples, 39.70%)</title><rect x="0.0937%" y="197" width="39.6978%" height="15" fill="rgb(219,149,13)" fg:x="16" fg:w="6778"/><text x="0.3437%" y="207.50">trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::..</text></g><g><title>trx`__rdl_dealloc (2 samples, 0.01%)</title><rect x="39.7915%" y="197" width="0.0117%" height="15" fill="rgb(250,156,29)" fg:x="6794" fg:w="2"/><text x="40.0415%" y="207.50"></text></g><g><title>trx`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;lib::engines::actor_like::ActorLikeEngine as lib::engines::AsyncEngine&gt;::publish_transaction::{{closure}}&gt;&gt; (8 samples, 0.05%)</title><rect x="39.8032%" y="197" width="0.0469%" height="15" fill="rgb(216,193,19)" fg:x="6796" fg:w="8"/><text x="40.0532%" y="207.50"></text></g><g><title>trx`csv::deserializer::deserialize_string_record (2 samples, 0.01%)</title><rect x="39.8618%" y="197" width="0.0117%" height="15" fill="rgb(216,135,14)" fg:x="6806" fg:w="2"/><text x="40.1118%" y="207.50"></text></g><g><title>trx`csv_core::reader::Reader::line (3 samples, 0.02%)</title><rect x="39.8735%" y="197" width="0.0176%" height="15" fill="rgb(241,47,5)" fg:x="6808" fg:w="3"/><text x="40.1235%" y="207.50"></text></g><g><title>trx`tokio::runtime::Runtime::block_on (6,810 samples, 39.89%)</title><rect x="0.0293%" y="277" width="39.8852%" height="15" fill="rgb(233,42,35)" fg:x="5" fg:w="6810"/><text x="0.2793%" y="287.50">trx`tokio::runtime::Runtime::block_on</text></g><g><title>trx`tokio::runtime::thread_pool::ThreadPool::block_on (6,810 samples, 39.89%)</title><rect x="0.0293%" y="261" width="39.8852%" height="15" fill="rgb(231,13,6)" fg:x="5" fg:w="6810"/><text x="0.2793%" y="271.50">trx`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>trx`tokio::park::thread::CachedParkThread::block_on (6,810 samples, 39.89%)</title><rect x="0.0293%" y="245" width="39.8852%" height="15" fill="rgb(207,181,40)" fg:x="5" fg:w="6810"/><text x="0.2793%" y="255.50">trx`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (6,810 samples, 39.89%)</title><rect x="0.0293%" y="229" width="39.8852%" height="15" fill="rgb(254,173,49)" fg:x="5" fg:w="6810"/><text x="0.2793%" y="239.50">trx`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,810 samples, 39.89%)</title><rect x="0.0293%" y="213" width="39.8852%" height="15" fill="rgb(221,1,38)" fg:x="5" fg:w="6810"/><text x="0.2793%" y="223.50">trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::..</text></g><g><title>trx`csv_core::reader::Reader::read_record (4 samples, 0.02%)</title><rect x="39.8911%" y="197" width="0.0234%" height="15" fill="rgb(206,124,46)" fg:x="6811" fg:w="4"/><text x="40.1411%" y="207.50"></text></g><g><title>dyld`start (6,816 samples, 39.92%)</title><rect x="0.0000%" y="373" width="39.9203%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="6816"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>trx`main (6,811 samples, 39.89%)</title><rect x="0.0293%" y="357" width="39.8911%" height="15" fill="rgb(222,201,40)" fg:x="5" fg:w="6811"/><text x="0.2793%" y="367.50">trx`main</text></g><g><title>trx`std::rt::lang_start_internal (6,811 samples, 39.89%)</title><rect x="0.0293%" y="341" width="39.8911%" height="15" fill="rgb(235,61,29)" fg:x="5" fg:w="6811"/><text x="0.2793%" y="351.50">trx`std::rt::lang_start_internal</text></g><g><title>trx`std::rt::lang_start::_{{closure}} (6,811 samples, 39.89%)</title><rect x="0.0293%" y="325" width="39.8911%" height="15" fill="rgb(219,207,3)" fg:x="5" fg:w="6811"/><text x="0.2793%" y="335.50">trx`std::rt::lang_start::_{{closure}}</text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (6,811 samples, 39.89%)</title><rect x="0.0293%" y="309" width="39.8911%" height="15" fill="rgb(222,56,46)" fg:x="5" fg:w="6811"/><text x="0.2793%" y="319.50">trx`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>trx`trx::main (6,811 samples, 39.89%)</title><rect x="0.0293%" y="293" width="39.8911%" height="15" fill="rgb(239,76,54)" fg:x="5" fg:w="6811"/><text x="0.2793%" y="303.50">trx`trx::main</text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.02%)</title><rect x="39.9321%" y="213" width="0.0176%" height="15" fill="rgb(231,124,27)" fg:x="6818" fg:w="3"/><text x="40.1821%" y="223.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (4 samples, 0.02%)</title><rect x="39.9496%" y="213" width="0.0234%" height="15" fill="rgb(249,195,6)" fg:x="6821" fg:w="4"/><text x="40.1996%" y="223.50"></text></g><g><title>trx`tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (21 samples, 0.12%)</title><rect x="39.9731%" y="213" width="0.1230%" height="15" fill="rgb(237,174,47)" fg:x="6825" fg:w="21"/><text x="40.2231%" y="223.50"></text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 0.01%)</title><rect x="40.0961%" y="213" width="0.0117%" height="15" fill="rgb(206,201,31)" fg:x="6846" fg:w="2"/><text x="40.3461%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.01%)</title><rect x="47.7217%" y="181" width="0.0117%" height="15" fill="rgb(231,57,52)" fg:x="8148" fg:w="2"/><text x="47.9717%" y="191.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (72 samples, 0.42%)</title><rect x="47.3996%" y="197" width="0.4217%" height="15" fill="rgb(248,177,22)" fg:x="8093" fg:w="72"/><text x="47.6496%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (15 samples, 0.09%)</title><rect x="47.7334%" y="181" width="0.0879%" height="15" fill="rgb(215,211,37)" fg:x="8150" fg:w="15"/><text x="47.9834%" y="191.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::unlock_slow (4 samples, 0.02%)</title><rect x="47.8212%" y="197" width="0.0234%" height="15" fill="rgb(241,128,51)" fg:x="8165" fg:w="4"/><text x="48.0712%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.02%)</title><rect x="47.8212%" y="181" width="0.0234%" height="15" fill="rgb(227,165,31)" fg:x="8165" fg:w="4"/><text x="48.0712%" y="191.50"></text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.05%)</title><rect x="47.8447%" y="197" width="0.0527%" height="15" fill="rgb(228,167,24)" fg:x="8169" fg:w="9"/><text x="48.0947%" y="207.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (202 samples, 1.18%)</title><rect x="47.8974%" y="197" width="1.1831%" height="15" fill="rgb(228,143,12)" fg:x="8178" fg:w="202"/><text x="48.1474%" y="207.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (20 samples, 0.12%)</title><rect x="48.9633%" y="181" width="0.1171%" height="15" fill="rgb(249,149,8)" fg:x="8360" fg:w="20"/><text x="49.2133%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (2 samples, 0.01%)</title><rect x="49.0688%" y="165" width="0.0117%" height="15" fill="rgb(243,35,44)" fg:x="8378" fg:w="2"/><text x="49.3188%" y="175.50"></text></g><g><title>trx`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (26 samples, 0.15%)</title><rect x="49.0805%" y="197" width="0.1523%" height="15" fill="rgb(246,89,9)" fg:x="8380" fg:w="26"/><text x="49.3305%" y="207.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (12 samples, 0.07%)</title><rect x="49.1625%" y="181" width="0.0703%" height="15" fill="rgb(233,213,13)" fg:x="8394" fg:w="12"/><text x="49.4125%" y="191.50"></text></g><g><title>trx`tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (196 samples, 1.15%)</title><rect x="49.2328%" y="197" width="1.1479%" height="15" fill="rgb(233,141,41)" fg:x="8406" fg:w="196"/><text x="49.4828%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="53.3794%" y="165" width="0.0176%" height="15" fill="rgb(239,167,4)" fg:x="9114" fg:w="3"/><text x="53.6294%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,812 samples, 16.47%)</title><rect x="54.0822%" y="149" width="16.4695%" height="15" fill="rgb(209,217,16)" fg:x="9234" fg:w="2812"/><text x="54.3322%" y="159.50">libsystem_kernel.dylib`__..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_cvwait (2 samples, 0.01%)</title><rect x="70.5517%" y="149" width="0.0117%" height="15" fill="rgb(219,88,35)" fg:x="12046" fg:w="2"/><text x="70.8017%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvclrprepost (2 samples, 0.01%)</title><rect x="70.9148%" y="133" width="0.0117%" height="15" fill="rgb(220,193,23)" fg:x="12108" fg:w="2"/><text x="71.1648%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (33 samples, 0.19%)</title><rect x="70.9266%" y="133" width="0.1933%" height="15" fill="rgb(230,90,52)" fg:x="12110" fg:w="33"/><text x="71.1766%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (68 samples, 0.40%)</title><rect x="71.1198%" y="117" width="0.3983%" height="15" fill="rgb(252,106,19)" fg:x="12143" fg:w="68"/><text x="71.3698%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (71 samples, 0.42%)</title><rect x="71.1198%" y="133" width="0.4158%" height="15" fill="rgb(206,74,20)" fg:x="12143" fg:w="71"/><text x="71.3698%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (3 samples, 0.02%)</title><rect x="71.5181%" y="117" width="0.0176%" height="15" fill="rgb(230,138,44)" fg:x="12211" fg:w="3"/><text x="71.7681%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (63 samples, 0.37%)</title><rect x="71.5357%" y="133" width="0.3690%" height="15" fill="rgb(235,182,43)" fg:x="12214" fg:w="63"/><text x="71.7857%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (235 samples, 1.38%)</title><rect x="70.5634%" y="149" width="1.3764%" height="15" fill="rgb(242,16,51)" fg:x="12048" fg:w="235"/><text x="70.8134%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (6 samples, 0.04%)</title><rect x="71.9047%" y="133" width="0.0351%" height="15" fill="rgb(248,9,4)" fg:x="12277" fg:w="6"/><text x="72.1547%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (14 samples, 0.08%)</title><rect x="71.9456%" y="149" width="0.0820%" height="15" fill="rgb(210,31,22)" fg:x="12284" fg:w="14"/><text x="72.1956%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (10 samples, 0.06%)</title><rect x="72.0276%" y="149" width="0.0586%" height="15" fill="rgb(239,54,39)" fg:x="12298" fg:w="10"/><text x="72.2776%" y="159.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (3,660 samples, 21.44%)</title><rect x="50.6618%" y="181" width="21.4361%" height="15" fill="rgb(230,99,41)" fg:x="8650" fg:w="3660"/><text x="50.9118%" y="191.50">trx`&lt;tokio::runtime::thread_pool::..</text></g><g><title>trx`parking_lot::condvar::Condvar::wait_until_internal (3,191 samples, 18.69%)</title><rect x="53.4087%" y="165" width="18.6892%" height="15" fill="rgb(253,106,12)" fg:x="9119" fg:w="3191"/><text x="53.6587%" y="175.50">trx`parking_lot::condvar::Con..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (2 samples, 0.01%)</title><rect x="72.0862%" y="149" width="0.0117%" height="15" fill="rgb(213,46,41)" fg:x="12308" fg:w="2"/><text x="72.3362%" y="159.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park_timeout (3 samples, 0.02%)</title><rect x="72.0979%" y="181" width="0.0176%" height="15" fill="rgb(215,133,35)" fg:x="12310" fg:w="3"/><text x="72.3479%" y="191.50"></text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::park_timeout (3,712 samples, 21.74%)</title><rect x="50.3807%" y="197" width="21.7407%" height="15" fill="rgb(213,28,5)" fg:x="8602" fg:w="3712"/><text x="50.6307%" y="207.50">trx`tokio::runtime::thread_pool::w..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.05%)</title><rect x="73.0819%" y="181" width="0.0469%" height="15" fill="rgb(215,77,49)" fg:x="12478" fg:w="8"/><text x="73.3319%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (2 samples, 0.01%)</title><rect x="73.1287%" y="181" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="12486" fg:w="2"/><text x="73.3787%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.04%)</title><rect x="73.1404%" y="181" width="0.0410%" height="15" fill="rgb(208,67,9)" fg:x="12488" fg:w="7"/><text x="73.3904%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="73.1814%" y="181" width="0.0176%" height="15" fill="rgb(219,133,21)" fg:x="12495" fg:w="3"/><text x="73.4314%" y="191.50"></text></g><g><title>trx`&lt;tokio::runtime::thread_pool::park::Unparker as tokio::park::Unpark&gt;::unpark (151 samples, 0.88%)</title><rect x="73.1990%" y="181" width="0.8844%" height="15" fill="rgb(246,46,29)" fg:x="12498" fg:w="151"/><text x="73.4490%" y="191.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (8 samples, 0.05%)</title><rect x="74.0365%" y="165" width="0.0469%" height="15" fill="rgb(246,185,52)" fg:x="12641" fg:w="8"/><text x="74.2865%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5 samples, 0.03%)</title><rect x="74.0541%" y="149" width="0.0293%" height="15" fill="rgb(252,136,11)" fg:x="12644" fg:w="5"/><text x="74.3041%" y="159.50"></text></g><g><title>trx`DYLD-STUB$$pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="74.0834%" y="181" width="0.0176%" height="15" fill="rgb(219,138,53)" fg:x="12649" fg:w="3"/><text x="74.3334%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,595 samples, 9.34%)</title><rect x="75.3309%" y="165" width="9.3417%" height="15" fill="rgb(211,51,23)" fg:x="12862" fg:w="1595"/><text x="75.5809%" y="175.50">libsystem_ker..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (75 samples, 0.44%)</title><rect x="84.6726%" y="165" width="0.4393%" height="15" fill="rgb(247,221,28)" fg:x="14457" fg:w="75"/><text x="84.9226%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (2 samples, 0.01%)</title><rect x="85.1119%" y="165" width="0.0117%" height="15" fill="rgb(251,222,45)" fg:x="14532" fg:w="2"/><text x="85.3619%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="85.1236%" y="165" width="0.0117%" height="15" fill="rgb(217,162,53)" fg:x="14534" fg:w="2"/><text x="85.3736%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.01%)</title><rect x="85.1353%" y="165" width="0.0117%" height="15" fill="rgb(229,93,14)" fg:x="14536" fg:w="2"/><text x="85.3853%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (2 samples, 0.01%)</title><rect x="85.1353%" y="149" width="0.0117%" height="15" fill="rgb(209,67,49)" fg:x="14536" fg:w="2"/><text x="85.3853%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (77 samples, 0.45%)</title><rect x="85.1470%" y="165" width="0.4510%" height="15" fill="rgb(213,87,29)" fg:x="14538" fg:w="77"/><text x="85.3970%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (20 samples, 0.12%)</title><rect x="85.4808%" y="149" width="0.1171%" height="15" fill="rgb(205,151,52)" fg:x="14595" fg:w="20"/><text x="85.7308%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (201 samples, 1.18%)</title><rect x="85.5980%" y="165" width="1.1772%" height="15" fill="rgb(253,215,39)" fg:x="14615" fg:w="201"/><text x="85.8480%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (9 samples, 0.05%)</title><rect x="86.7752%" y="165" width="0.0527%" height="15" fill="rgb(221,220,41)" fg:x="14816" fg:w="9"/><text x="87.0252%" y="175.50"></text></g><g><title>trx`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (4 samples, 0.02%)</title><rect x="86.8279%" y="165" width="0.0234%" height="15" fill="rgb(218,133,21)" fg:x="14825" fg:w="4"/><text x="87.0779%" y="175.50"></text></g><g><title>trx`parking_lot::condvar::Condvar::notify_one_slow (2,292 samples, 13.42%)</title><rect x="74.1010%" y="181" width="13.4239%" height="15" fill="rgb(221,193,43)" fg:x="12652" fg:w="2292"/><text x="74.3510%" y="191.50">trx`parking_lot::con..</text></g><g><title>trx`parking_lot_core::parking_lot::lock_bucket_pair (114 samples, 0.67%)</title><rect x="86.8572%" y="165" width="0.6677%" height="15" fill="rgb(240,128,52)" fg:x="14830" fg:w="114"/><text x="87.1072%" y="175.50"></text></g><g><title>trx`parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.02%)</title><rect x="87.5249%" y="181" width="0.0234%" height="15" fill="rgb(253,114,12)" fg:x="14944" fg:w="4"/><text x="87.7749%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3 samples, 0.02%)</title><rect x="87.5307%" y="165" width="0.0176%" height="15" fill="rgb(215,223,47)" fg:x="14945" fg:w="3"/><text x="87.7807%" y="175.50"></text></g><g><title>trx`parking_lot_core::parking_lot::FairTimeout::gen_u32 (10 samples, 0.06%)</title><rect x="87.5483%" y="181" width="0.0586%" height="15" fill="rgb(248,225,23)" fg:x="14948" fg:w="10"/><text x="87.7983%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.06%)</title><rect x="87.9583%" y="165" width="0.0644%" height="15" fill="rgb(250,108,0)" fg:x="15018" fg:w="11"/><text x="88.2083%" y="175.50"></text></g><g><title>trx`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.02%)</title><rect x="88.0227%" y="165" width="0.0176%" height="15" fill="rgb(228,208,7)" fg:x="15029" fg:w="3"/><text x="88.2727%" y="175.50"></text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="88.2043%" y="149" width="0.0176%" height="15" fill="rgb(244,45,10)" fg:x="15060" fg:w="3"/><text x="88.4543%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.11%)</title><rect x="88.4913%" y="117" width="0.1113%" height="15" fill="rgb(207,125,25)" fg:x="15109" fg:w="19"/><text x="88.7413%" y="127.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (35 samples, 0.20%)</title><rect x="93.8737%" y="85" width="0.2050%" height="15" fill="rgb(210,195,18)" fg:x="16028" fg:w="35"/><text x="94.1237%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="94.3598%" y="69" width="0.0117%" height="15" fill="rgb(249,80,12)" fg:x="16111" fg:w="2"/><text x="94.6098%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="94.3598%" y="53" width="0.0117%" height="15" fill="rgb(221,65,9)" fg:x="16111" fg:w="2"/><text x="94.6098%" y="63.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (57 samples, 0.33%)</title><rect x="94.0787%" y="85" width="0.3338%" height="15" fill="rgb(235,49,36)" fg:x="16063" fg:w="57"/><text x="94.3287%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="94.3833%" y="69" width="0.0293%" height="15" fill="rgb(225,32,20)" fg:x="16115" fg:w="5"/><text x="94.6333%" y="79.50"></text></g><g><title>trx`rust_decimal::ops::add::add_sub_internal (4 samples, 0.02%)</title><rect x="94.4418%" y="69" width="0.0234%" height="15" fill="rgb(215,141,46)" fg:x="16125" fg:w="4"/><text x="94.6918%" y="79.50"></text></g><g><title>trx`rust_decimal::ops::add::add_impl (11 samples, 0.06%)</title><rect x="94.4126%" y="85" width="0.0644%" height="15" fill="rgb(250,160,47)" fg:x="16120" fg:w="11"/><text x="94.6626%" y="95.50"></text></g><g><title>trx`rust_decimal::ops::add::fast_add (2 samples, 0.01%)</title><rect x="94.4653%" y="69" width="0.0117%" height="15" fill="rgb(216,222,40)" fg:x="16129" fg:w="2"/><text x="94.7153%" y="79.50"></text></g><g><title>trx`&lt;lib::storage::Client as lib::storage::ClientStorage&gt;::deposit (150 samples, 0.88%)</title><rect x="93.6277%" y="101" width="0.8785%" height="15" fill="rgb(234,217,39)" fg:x="15986" fg:w="150"/><text x="93.8777%" y="111.50"></text></g><g><title>trx`rust_decimal::ops::add::fast_add (4 samples, 0.02%)</title><rect x="94.4828%" y="85" width="0.0234%" height="15" fill="rgb(207,178,40)" fg:x="16132" fg:w="4"/><text x="94.7328%" y="95.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (21 samples, 0.12%)</title><rect x="94.5765%" y="85" width="0.1230%" height="15" fill="rgb(221,136,13)" fg:x="16148" fg:w="21"/><text x="94.8265%" y="95.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.13%)</title><rect x="94.6995%" y="85" width="0.1347%" height="15" fill="rgb(249,199,10)" fg:x="16169" fg:w="23"/><text x="94.9495%" y="95.50"></text></g><g><title>trx`rust_decimal::ops::add::sub_impl (6 samples, 0.04%)</title><rect x="94.8401%" y="85" width="0.0351%" height="15" fill="rgb(249,222,13)" fg:x="16193" fg:w="6"/><text x="95.0901%" y="95.50"></text></g><g><title>trx`rust_decimal::ops::add::add_sub_internal (6 samples, 0.04%)</title><rect x="94.8401%" y="69" width="0.0351%" height="15" fill="rgb(244,185,38)" fg:x="16193" fg:w="6"/><text x="95.0901%" y="79.50"></text></g><g><title>trx`&lt;lib::storage::Client as lib::storage::ClientStorage&gt;::withdraw (69 samples, 0.40%)</title><rect x="94.5063%" y="101" width="0.4041%" height="15" fill="rgb(236,202,9)" fg:x="16136" fg:w="69"/><text x="94.7563%" y="111.50"></text></g><g><title>trx`rust_decimal::ops::cmp::cmp_impl (6 samples, 0.04%)</title><rect x="94.8752%" y="85" width="0.0351%" height="15" fill="rgb(250,229,37)" fg:x="16199" fg:w="6"/><text x="95.1252%" y="95.50"></text></g><g><title>trx`rust_decimal::ops::cmp::cmp_internal (3 samples, 0.02%)</title><rect x="94.8928%" y="69" width="0.0176%" height="15" fill="rgb(206,174,23)" fg:x="16202" fg:w="3"/><text x="95.1428%" y="79.50"></text></g><g><title>trx`lib::transaction::Transaction::transition (4 samples, 0.02%)</title><rect x="94.9162%" y="101" width="0.0234%" height="15" fill="rgb(211,33,43)" fg:x="16206" fg:w="4"/><text x="95.1662%" y="111.50"></text></g><g><title>trx`eyre::error::_&lt;impl eyre::Report&gt;::from_adhoc (2 samples, 0.01%)</title><rect x="94.9280%" y="85" width="0.0117%" height="15" fill="rgb(245,58,50)" fg:x="16208" fg:w="2"/><text x="95.1780%" y="95.50"></text></g><g><title>trx`eyre::capture_handler (2 samples, 0.01%)</title><rect x="94.9280%" y="69" width="0.0117%" height="15" fill="rgb(244,68,36)" fg:x="16208" fg:w="2"/><text x="95.1780%" y="79.50"></text></g><g><title>trx`color_eyre::config::EyreHook::into_eyre_hook::_{{closure}} (2 samples, 0.01%)</title><rect x="94.9280%" y="53" width="0.0117%" height="15" fill="rgb(232,229,15)" fg:x="16208" fg:w="2"/><text x="95.1780%" y="63.50"></text></g><g><title>trx`color_eyre::config::lib_verbosity (2 samples, 0.01%)</title><rect x="94.9280%" y="37" width="0.0117%" height="15" fill="rgb(254,30,23)" fg:x="16208" fg:w="2"/><text x="95.1780%" y="47.50"></text></g><g><title>trx`&lt;lib::storage::Client as lib::storage::ClientStorage&gt;::process_transaction (1,084 samples, 6.35%)</title><rect x="88.6026%" y="117" width="6.3488%" height="15" fill="rgb(235,160,14)" fg:x="15128" fg:w="1084"/><text x="88.8526%" y="127.50">trx`&lt;lib..</text></g><g><title>trx`rust_decimal::ops::add::sub_impl (2 samples, 0.01%)</title><rect x="94.9397%" y="101" width="0.0117%" height="15" fill="rgb(212,155,44)" fg:x="16210" fg:w="2"/><text x="95.1897%" y="111.50"></text></g><g><title>trx`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="94.9572%" y="117" width="0.0293%" height="15" fill="rgb(226,2,50)" fg:x="16213" fg:w="5"/><text x="95.2072%" y="127.50"></text></g><g><title>trx`tokio::coop::Budget::decrement (7 samples, 0.04%)</title><rect x="94.9865%" y="117" width="0.0410%" height="15" fill="rgb(234,177,6)" fg:x="16218" fg:w="7"/><text x="95.2365%" y="127.50"></text></g><g><title>trx`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.02%)</title><rect x="95.0275%" y="117" width="0.0234%" height="15" fill="rgb(217,24,9)" fg:x="16225" fg:w="4"/><text x="95.2775%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.03%)</title><rect x="95.5371%" y="101" width="0.0293%" height="15" fill="rgb(220,13,46)" fg:x="16312" fg:w="5"/><text x="95.7871%" y="111.50"></text></g><g><title>trx`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (9 samples, 0.05%)</title><rect x="95.5664%" y="101" width="0.0527%" height="15" fill="rgb(239,221,27)" fg:x="16317" fg:w="9"/><text x="95.8164%" y="111.50"></text></g><g><title>trx`tokio::coop::Budget::decrement (15 samples, 0.09%)</title><rect x="95.6249%" y="101" width="0.0879%" height="15" fill="rgb(222,198,25)" fg:x="16327" fg:w="15"/><text x="95.8749%" y="111.50"></text></g><g><title>trx`tokio::coop::RestoreOnPending::made_progress (4 samples, 0.02%)</title><rect x="95.7128%" y="101" width="0.0234%" height="15" fill="rgb(211,99,13)" fg:x="16342" fg:w="4"/><text x="95.9628%" y="111.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="95.9529%" y="85" width="0.0351%" height="15" fill="rgb(232,111,31)" fg:x="16383" fg:w="6"/><text x="96.2029%" y="95.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (72 samples, 0.42%)</title><rect x="95.9881%" y="85" width="0.4217%" height="15" fill="rgb(245,82,37)" fg:x="16389" fg:w="72"/><text x="96.2381%" y="95.50"></text></g><g><title>trx`tokio::sync::mpsc::block::is_ready (9 samples, 0.05%)</title><rect x="96.4273%" y="85" width="0.0527%" height="15" fill="rgb(227,149,46)" fg:x="16464" fg:w="9"/><text x="96.6773%" y="95.50"></text></g><g><title>trx`tokio::sync::mpsc::block::is_tx_closed (4 samples, 0.02%)</title><rect x="96.4800%" y="85" width="0.0234%" height="15" fill="rgb(218,36,50)" fg:x="16473" fg:w="4"/><text x="96.7300%" y="95.50"></text></g><g><title>trx`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="98.6471%" y="69" width="0.0117%" height="15" fill="rgb(226,80,48)" fg:x="16843" fg:w="2"/><text x="98.8971%" y="79.50"></text></g><g><title>trx`core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (5 samples, 0.03%)</title><rect x="98.6588%" y="69" width="0.0293%" height="15" fill="rgb(238,224,15)" fg:x="16845" fg:w="5"/><text x="98.9088%" y="79.50"></text></g><g><title>trx`tokio::sync::mpsc::block::is_ready (3 samples, 0.02%)</title><rect x="98.6881%" y="69" width="0.0176%" height="15" fill="rgb(241,136,10)" fg:x="16850" fg:w="3"/><text x="98.9381%" y="79.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (382 samples, 2.24%)</title><rect x="96.5035%" y="85" width="2.2373%" height="15" fill="rgb(208,32,45)" fg:x="16477" fg:w="382"/><text x="96.7535%" y="95.50">t..</text></g><g><title>trx`tokio::sync::mpsc::block::is_tx_closed (6 samples, 0.04%)</title><rect x="98.7056%" y="69" width="0.0351%" height="15" fill="rgb(207,135,9)" fg:x="16853" fg:w="6"/><text x="98.9556%" y="79.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_inc (2 samples, 0.01%)</title><rect x="99.1625%" y="69" width="0.0117%" height="15" fill="rgb(206,86,44)" fg:x="16931" fg:w="2"/><text x="99.4125%" y="79.50"></text></g><g><title>trx`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (611 samples, 3.58%)</title><rect x="95.7362%" y="101" width="3.5785%" height="15" fill="rgb(245,177,15)" fg:x="16346" fg:w="611"/><text x="95.9862%" y="111.50">trx`..</text></g><g><title>trx`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (98 samples, 0.57%)</title><rect x="98.7408%" y="85" width="0.5740%" height="15" fill="rgb(206,64,50)" fg:x="16859" fg:w="98"/><text x="98.9908%" y="95.50"></text></g><g><title>trx`tokio::runtime::task::waker::clone_waker (24 samples, 0.14%)</title><rect x="99.1742%" y="69" width="0.1406%" height="15" fill="rgb(234,36,40)" fg:x="16933" fg:w="24"/><text x="99.4242%" y="79.50"></text></g><g><title>trx`tokio::runtime::task::state::State::ref_inc (22 samples, 0.13%)</title><rect x="99.1859%" y="53" width="0.1289%" height="15" fill="rgb(213,64,8)" fg:x="16935" fg:w="22"/><text x="99.4359%" y="63.50"></text></g><g><title>trx`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (9 samples, 0.05%)</title><rect x="99.3147%" y="101" width="0.0527%" height="15" fill="rgb(210,75,36)" fg:x="16957" fg:w="9"/><text x="99.5647%" y="111.50"></text></g><g><title>trx`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,892 samples, 11.08%)</title><rect x="88.2921%" y="133" width="11.0812%" height="15" fill="rgb(229,88,21)" fg:x="15075" fg:w="1892"/><text x="88.5421%" y="143.50">trx`&lt;core::futur..</text></g><g><title>trx`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (738 samples, 4.32%)</title><rect x="95.0510%" y="117" width="4.3224%" height="15" fill="rgb(252,204,47)" fg:x="16229" fg:w="738"/><text x="95.3010%" y="127.50">trx`t..</text></g><g><title>trx`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,906 samples, 11.16%)</title><rect x="88.2219%" y="149" width="11.1632%" height="15" fill="rgb(208,77,27)" fg:x="15063" fg:w="1906"/><text x="88.4719%" y="159.50">trx`&lt;core::panic..</text></g><g><title>trx`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2 samples, 0.01%)</title><rect x="99.3733%" y="133" width="0.0117%" height="15" fill="rgb(221,76,26)" fg:x="16967" fg:w="2"/><text x="99.6233%" y="143.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_idle (34 samples, 0.20%)</title><rect x="99.3850%" y="149" width="0.1991%" height="15" fill="rgb(225,139,18)" fg:x="16969" fg:w="34"/><text x="99.6350%" y="159.50"></text></g><g><title>trx`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,023 samples, 11.85%)</title><rect x="88.0403%" y="165" width="11.8484%" height="15" fill="rgb(230,137,11)" fg:x="15032" fg:w="2023"/><text x="88.2903%" y="175.50">trx`tokio::runtime..</text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_running (52 samples, 0.30%)</title><rect x="99.5842%" y="149" width="0.3046%" height="15" fill="rgb(212,28,1)" fg:x="17003" fg:w="52"/><text x="99.8342%" y="159.50"></text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_idle (2 samples, 0.01%)</title><rect x="99.8946%" y="165" width="0.0117%" height="15" fill="rgb(248,164,17)" fg:x="17056" fg:w="2"/><text x="100.1446%" y="175.50"></text></g><g><title>trx`std::thread::local::LocalKey&lt;T&gt;::with (2,103 samples, 12.32%)</title><rect x="87.6127%" y="181" width="12.3170%" height="15" fill="rgb(222,171,42)" fg:x="14959" fg:w="2103"/><text x="87.8627%" y="191.50">trx`std::thread::l..</text></g><g><title>trx`tokio::runtime::task::state::State::transition_to_running (4 samples, 0.02%)</title><rect x="99.9063%" y="165" width="0.0234%" height="15" fill="rgb(243,84,45)" fg:x="17058" fg:w="4"/><text x="100.1563%" y="175.50"></text></g><g><title>trx`tokio::coop::CURRENT::__getit (6 samples, 0.04%)</title><rect x="99.9297%" y="181" width="0.0351%" height="15" fill="rgb(252,49,23)" fg:x="17062" fg:w="6"/><text x="100.1797%" y="191.50"></text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::run (10,224 samples, 59.88%)</title><rect x="40.1078%" y="213" width="59.8805%" height="15" fill="rgb(215,19,7)" fg:x="6848" fg:w="10224"/><text x="40.3578%" y="223.50">trx`tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>trx`tokio::runtime::thread_pool::worker::Context::run_task (4,758 samples, 27.87%)</title><rect x="72.1214%" y="197" width="27.8669%" height="15" fill="rgb(238,81,41)" fg:x="12314" fg:w="4758"/><text x="72.3714%" y="207.50">trx`tokio::runtime::thread_pool::worker::Cont..</text></g><g><title>trx`tokio::runtime::task::raw::poll (4 samples, 0.02%)</title><rect x="99.9649%" y="181" width="0.0234%" height="15" fill="rgb(210,199,37)" fg:x="17068" fg:w="4"/><text x="100.2149%" y="191.50"></text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (10,255 samples, 60.06%)</title><rect x="39.9321%" y="309" width="60.0621%" height="15" fill="rgb(244,192,49)" fg:x="6818" fg:w="10255"/><text x="40.1821%" y="319.50">trx`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>trx`tokio::runtime::blocking::pool::Inner::run (10,255 samples, 60.06%)</title><rect x="39.9321%" y="293" width="60.0621%" height="15" fill="rgb(226,211,11)" fg:x="6818" fg:w="10255"/><text x="40.1821%" y="303.50">trx`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>trx`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10,255 samples, 60.06%)</title><rect x="39.9321%" y="277" width="60.0621%" height="15" fill="rgb(236,162,54)" fg:x="6818" fg:w="10255"/><text x="40.1821%" y="287.50">trx`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>trx`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (10,255 samples, 60.06%)</title><rect x="39.9321%" y="261" width="60.0621%" height="15" fill="rgb(220,229,9)" fg:x="6818" fg:w="10255"/><text x="40.1821%" y="271.50">trx`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>trx`tokio::runtime::thread_pool::worker::run (10,255 samples, 60.06%)</title><rect x="39.9321%" y="245" width="60.0621%" height="15" fill="rgb(250,87,22)" fg:x="6818" fg:w="10255"/><text x="40.1821%" y="255.50">trx`tokio::runtime::thread_pool::worker::run</text></g><g><title>trx`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,255 samples, 60.06%)</title><rect x="39.9321%" y="229" width="60.0621%" height="15" fill="rgb(239,43,17)" fg:x="6818" fg:w="10255"/><text x="40.1821%" y="239.50">trx`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>all (17,074 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="17074"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (10,258 samples, 60.08%)</title><rect x="39.9203%" y="373" width="60.0797%" height="15" fill="rgb(219,179,1)" fg:x="6816" fg:w="10258"/><text x="40.1703%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (10,256 samples, 60.07%)</title><rect x="39.9321%" y="357" width="60.0679%" height="15" fill="rgb(238,219,53)" fg:x="6818" fg:w="10256"/><text x="40.1821%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>trx`std::sys::unix::thread::Thread::new::thread_start (10,256 samples, 60.07%)</title><rect x="39.9321%" y="341" width="60.0679%" height="15" fill="rgb(232,167,36)" fg:x="6818" fg:w="10256"/><text x="40.1821%" y="351.50">trx`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>trx`core::ops::function::FnOnce::call_once{{vtable.shim}} (10,256 samples, 60.07%)</title><rect x="39.9321%" y="325" width="60.0679%" height="15" fill="rgb(244,19,51)" fg:x="6818" fg:w="10256"/><text x="40.1821%" y="335.50">trx`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>