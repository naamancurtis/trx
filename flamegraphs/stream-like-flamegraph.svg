<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="108222"><g><title>libsystem_kernel.dylib`read (38 samples, 0.04%)</title><rect x="0.1793%" y="149" width="0.0351%" height="15" fill="rgb(227,0,7)" fg:x="194" fg:w="38"/><text x="0.4293%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`calloc (18 samples, 0.02%)</title><rect x="0.2255%" y="149" width="0.0166%" height="15" fill="rgb(217,0,24)" fg:x="244" fg:w="18"/><text x="0.4755%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (48 samples, 0.04%)</title><rect x="0.2421%" y="149" width="0.0444%" height="15" fill="rgb(221,193,54)" fg:x="262" fg:w="48"/><text x="0.4921%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.01%)</title><rect x="0.2864%" y="149" width="0.0120%" height="15" fill="rgb(248,212,6)" fg:x="310" fg:w="13"/><text x="0.5364%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.01%)</title><rect x="0.3059%" y="149" width="0.0102%" height="15" fill="rgb(208,68,35)" fg:x="331" fg:w="11"/><text x="0.5559%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (21 samples, 0.02%)</title><rect x="0.3234%" y="149" width="0.0194%" height="15" fill="rgb(232,128,0)" fg:x="350" fg:w="21"/><text x="0.5734%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (41 samples, 0.04%)</title><rect x="0.3428%" y="149" width="0.0379%" height="15" fill="rgb(207,160,47)" fg:x="371" fg:w="41"/><text x="0.5928%" y="159.50"></text></g><g><title>trx`__rdl_alloc_zeroed (16 samples, 0.01%)</title><rect x="0.3946%" y="149" width="0.0148%" height="15" fill="rgb(228,23,34)" fg:x="427" fg:w="16"/><text x="0.6446%" y="159.50"></text></g><g><title>trx`__rdl_dealloc (23 samples, 0.02%)</title><rect x="0.4093%" y="149" width="0.0213%" height="15" fill="rgb(218,30,26)" fg:x="443" fg:w="23"/><text x="0.6593%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.05%)</title><rect x="0.5008%" y="85" width="0.0453%" height="15" fill="rgb(220,122,19)" fg:x="542" fg:w="49"/><text x="0.7508%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (53 samples, 0.05%)</title><rect x="0.5664%" y="69" width="0.0490%" height="15" fill="rgb(250,228,42)" fg:x="613" fg:w="53"/><text x="0.8164%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (85 samples, 0.08%)</title><rect x="0.6209%" y="53" width="0.0785%" height="15" fill="rgb(240,193,28)" fg:x="672" fg:w="85"/><text x="0.8709%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (47 samples, 0.04%)</title><rect x="0.6561%" y="37" width="0.0434%" height="15" fill="rgb(216,20,37)" fg:x="710" fg:w="47"/><text x="0.9061%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (95 samples, 0.09%)</title><rect x="0.6154%" y="69" width="0.0878%" height="15" fill="rgb(206,188,39)" fg:x="666" fg:w="95"/><text x="0.8654%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (34 samples, 0.03%)</title><rect x="0.7032%" y="69" width="0.0314%" height="15" fill="rgb(217,207,13)" fg:x="761" fg:w="34"/><text x="0.9532%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (205 samples, 0.19%)</title><rect x="0.5461%" y="85" width="0.1894%" height="15" fill="rgb(231,73,38)" fg:x="591" fg:w="205"/><text x="0.7961%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (272 samples, 0.25%)</title><rect x="0.4860%" y="101" width="0.2513%" height="15" fill="rgb(225,20,46)" fg:x="526" fg:w="272"/><text x="0.7360%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (59 samples, 0.05%)</title><rect x="0.7374%" y="101" width="0.0545%" height="15" fill="rgb(210,31,41)" fg:x="798" fg:w="59"/><text x="0.9874%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (355 samples, 0.33%)</title><rect x="0.4676%" y="117" width="0.3280%" height="15" fill="rgb(221,200,47)" fg:x="506" fg:w="355"/><text x="0.7176%" y="127.50"></text></g><g><title>trx`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (389 samples, 0.36%)</title><rect x="0.4426%" y="149" width="0.3594%" height="15" fill="rgb(226,26,5)" fg:x="479" fg:w="389"/><text x="0.6926%" y="159.50"></text></g><g><title>trx`alloc::raw_vec::finish_grow (374 samples, 0.35%)</title><rect x="0.4565%" y="133" width="0.3456%" height="15" fill="rgb(249,33,26)" fg:x="494" fg:w="374"/><text x="0.7065%" y="143.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (17 samples, 0.02%)</title><rect x="0.8076%" y="149" width="0.0157%" height="15" fill="rgb(235,183,28)" fg:x="874" fg:w="17"/><text x="1.0576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (125 samples, 0.12%)</title><rect x="1.2705%" y="85" width="0.1155%" height="15" fill="rgb(221,5,38)" fg:x="1375" fg:w="125"/><text x="1.5205%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.01%)</title><rect x="1.3860%" y="85" width="0.0102%" height="15" fill="rgb(247,18,42)" fg:x="1500" fg:w="11"/><text x="1.6360%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (248 samples, 0.23%)</title><rect x="1.1772%" y="101" width="0.2292%" height="15" fill="rgb(241,131,45)" fg:x="1274" fg:w="248"/><text x="1.4272%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (11 samples, 0.01%)</title><rect x="1.3962%" y="85" width="0.0102%" height="15" fill="rgb(249,31,29)" fg:x="1511" fg:w="11"/><text x="1.6462%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (321 samples, 0.30%)</title><rect x="1.1144%" y="133" width="0.2966%" height="15" fill="rgb(225,111,53)" fg:x="1206" fg:w="321"/><text x="1.3644%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (286 samples, 0.26%)</title><rect x="1.1467%" y="117" width="0.2643%" height="15" fill="rgb(238,160,17)" fg:x="1241" fg:w="286"/><text x="1.3967%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (164 samples, 0.15%)</title><rect x="1.4110%" y="133" width="0.1515%" height="15" fill="rgb(214,148,48)" fg:x="1527" fg:w="164"/><text x="1.6610%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (144 samples, 0.13%)</title><rect x="1.4295%" y="117" width="0.1331%" height="15" fill="rgb(232,36,49)" fg:x="1547" fg:w="144"/><text x="1.6795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (135 samples, 0.12%)</title><rect x="1.4378%" y="101" width="0.1247%" height="15" fill="rgb(209,103,24)" fg:x="1556" fg:w="135"/><text x="1.6878%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (68 samples, 0.06%)</title><rect x="1.4997%" y="85" width="0.0628%" height="15" fill="rgb(229,88,8)" fg:x="1623" fg:w="68"/><text x="1.7497%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (20 samples, 0.02%)</title><rect x="1.5625%" y="133" width="0.0185%" height="15" fill="rgb(213,181,19)" fg:x="1691" fg:w="20"/><text x="1.8125%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (245 samples, 0.23%)</title><rect x="1.6642%" y="117" width="0.2264%" height="15" fill="rgb(254,191,54)" fg:x="1801" fg:w="245"/><text x="1.9142%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (339 samples, 0.31%)</title><rect x="1.5875%" y="133" width="0.3132%" height="15" fill="rgb(241,83,37)" fg:x="1718" fg:w="339"/><text x="1.8375%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.01%)</title><rect x="1.8906%" y="117" width="0.0102%" height="15" fill="rgb(233,36,39)" fg:x="2046" fg:w="11"/><text x="2.1406%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (40 samples, 0.04%)</title><rect x="1.9053%" y="133" width="0.0370%" height="15" fill="rgb(226,3,54)" fg:x="2062" fg:w="40"/><text x="2.1553%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (259 samples, 0.24%)</title><rect x="1.9423%" y="133" width="0.2393%" height="15" fill="rgb(245,192,40)" fg:x="2102" fg:w="259"/><text x="2.1923%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.01%)</title><rect x="2.1844%" y="133" width="0.0139%" height="15" fill="rgb(238,167,29)" fg:x="2364" fg:w="15"/><text x="2.4344%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (71 samples, 0.07%)</title><rect x="2.1983%" y="133" width="0.0656%" height="15" fill="rgb(232,182,51)" fg:x="2379" fg:w="71"/><text x="2.4483%" y="143.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_fwd (159 samples, 0.15%)</title><rect x="2.2722%" y="133" width="0.1469%" height="15" fill="rgb(231,60,39)" fg:x="2459" fg:w="159"/><text x="2.5222%" y="143.50"></text></g><g><title>trx`bstr::unicode::whitespace::whitespace_len_rev (172 samples, 0.16%)</title><rect x="2.4191%" y="133" width="0.1589%" height="15" fill="rgb(208,69,12)" fg:x="2618" fg:w="172"/><text x="2.6691%" y="143.50"></text></g><g><title>trx`regex_automata::dfa::DFA::rfind_at (61 samples, 0.06%)</title><rect x="2.5217%" y="117" width="0.0564%" height="15" fill="rgb(235,93,37)" fg:x="2729" fg:w="61"/><text x="2.7717%" y="127.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::trim (1,893 samples, 1.75%)</title><rect x="0.8390%" y="149" width="1.7492%" height="15" fill="rgb(213,116,39)" fg:x="908" fg:w="1893"/><text x="1.0890%" y="159.50"></text></g><g><title>trx`regex_automata::dfa::DFA::rfind_at (11 samples, 0.01%)</title><rect x="2.5780%" y="133" width="0.0102%" height="15" fill="rgb(222,207,29)" fg:x="2790" fg:w="11"/><text x="2.8280%" y="143.50"></text></g><g><title>trx`csv::byte_record::ByteRecord::validate (20 samples, 0.02%)</title><rect x="2.5882%" y="149" width="0.0185%" height="15" fill="rgb(206,96,30)" fg:x="2801" fg:w="20"/><text x="2.8382%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (141 samples, 0.13%)</title><rect x="2.9883%" y="53" width="0.1303%" height="15" fill="rgb(218,138,4)" fg:x="3234" fg:w="141"/><text x="3.2383%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (74 samples, 0.07%)</title><rect x="3.0502%" y="37" width="0.0684%" height="15" fill="rgb(250,191,14)" fg:x="3301" fg:w="74"/><text x="3.3002%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (180 samples, 0.17%)</title><rect x="2.9550%" y="85" width="0.1663%" height="15" fill="rgb(239,60,40)" fg:x="3198" fg:w="180"/><text x="3.2050%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (155 samples, 0.14%)</title><rect x="2.9781%" y="69" width="0.1432%" height="15" fill="rgb(206,27,48)" fg:x="3223" fg:w="155"/><text x="3.2281%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (77 samples, 0.07%)</title><rect x="3.1611%" y="69" width="0.0712%" height="15" fill="rgb(225,35,8)" fg:x="3421" fg:w="77"/><text x="3.4111%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (116 samples, 0.11%)</title><rect x="3.1297%" y="85" width="0.1072%" height="15" fill="rgb(250,213,24)" fg:x="3387" fg:w="116"/><text x="3.3797%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.01%)</title><rect x="3.2369%" y="85" width="0.0102%" height="15" fill="rgb(247,123,22)" fg:x="3503" fg:w="11"/><text x="3.4869%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (95 samples, 0.09%)</title><rect x="3.2470%" y="85" width="0.0878%" height="15" fill="rgb(231,138,38)" fg:x="3514" fg:w="95"/><text x="3.4970%" y="95.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (60 samples, 0.06%)</title><rect x="3.3764%" y="53" width="0.0554%" height="15" fill="rgb(231,145,46)" fg:x="3654" fg:w="60"/><text x="3.6264%" y="63.50"></text></g><g><title>trx`rust_decimal::str::handle_digit_64 (81 samples, 0.07%)</title><rect x="3.3588%" y="69" width="0.0748%" height="15" fill="rgb(251,118,11)" fg:x="3635" fg:w="81"/><text x="3.6088%" y="79.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::from_str_exact (97 samples, 0.09%)</title><rect x="3.3477%" y="85" width="0.0896%" height="15" fill="rgb(217,147,25)" fg:x="3623" fg:w="97"/><text x="3.5977%" y="95.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp (319 samples, 0.29%)</title><rect x="3.4374%" y="85" width="0.2948%" height="15" fill="rgb(247,81,37)" fg:x="3720" fg:w="319"/><text x="3.6874%" y="95.50"></text></g><g><title>trx`rust_decimal::decimal::Decimal::round_dp_with_strategy (314 samples, 0.29%)</title><rect x="3.4420%" y="69" width="0.2901%" height="15" fill="rgb(209,12,38)" fg:x="3725" fg:w="314"/><text x="3.6920%" y="79.50"></text></g><g><title>trx`&lt;lib::amount::Amount as serde::de::Deserialize&gt;::deserialize (924 samples, 0.85%)</title><rect x="2.8802%" y="101" width="0.8538%" height="15" fill="rgb(227,1,9)" fg:x="3117" fg:w="924"/><text x="3.1302%" y="111.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_option (1,006 samples, 0.93%)</title><rect x="2.8109%" y="117" width="0.9296%" height="15" fill="rgb(248,47,43)" fg:x="3042" fg:w="1006"/><text x="3.0609%" y="127.50"></text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u16&gt;::from_str (24 samples, 0.02%)</title><rect x="3.8125%" y="101" width="0.0222%" height="15" fill="rgb(221,10,30)" fg:x="4126" fg:w="24"/><text x="4.0625%" y="111.50"></text></g><g><title>trx`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (153 samples, 0.14%)</title><rect x="3.7423%" y="117" width="0.1414%" height="15" fill="rgb(210,229,1)" fg:x="4050" fg:w="153"/><text x="3.9923%" y="127.50"></text></g><g><title>trx`core::num::_&lt;impl core::str::traits::FromStr for u32&gt;::from_str (53 samples, 0.05%)</title><rect x="3.8347%" y="101" width="0.0490%" height="15" fill="rgb(222,148,37)" fg:x="4150" fg:w="53"/><text x="4.0847%" y="111.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::IncomingTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (30 samples, 0.03%)</title><rect x="3.8855%" y="117" width="0.0277%" height="15" fill="rgb(234,67,33)" fg:x="4205" fg:w="30"/><text x="4.1355%" y="127.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::EnumAccess&gt;::variant_seed (74 samples, 0.07%)</title><rect x="3.9243%" y="101" width="0.0684%" height="15" fill="rgb(247,98,35)" fg:x="4247" fg:w="74"/><text x="4.1743%" y="111.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (44 samples, 0.04%)</title><rect x="3.9521%" y="85" width="0.0407%" height="15" fill="rgb(247,138,52)" fg:x="4277" fg:w="44"/><text x="4.2021%" y="95.50"></text></g><g><title>trx`&lt;lib::transaction::_::&lt;impl serde::de::Deserialize for lib::transaction::TransactionType&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (91 samples, 0.08%)</title><rect x="3.9133%" y="117" width="0.0841%" height="15" fill="rgb(213,79,30)" fg:x="4235" fg:w="91"/><text x="4.1633%" y="127.50"></text></g><g><title>trx`&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,440 samples, 1.33%)</title><rect x="2.6695%" y="133" width="1.3306%" height="15" fill="rgb(246,177,23)" fg:x="2889" fg:w="1440"/><text x="2.9195%" y="143.50"></text></g><g><title>trx`csv::deserializer::deserialize_string_record (1,517 samples, 1.40%)</title><rect x="2.6067%" y="149" width="1.4017%" height="15" fill="rgb(230,62,27)" fg:x="2821" fg:w="1517"/><text x="2.8567%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (107 samples, 0.10%)</title><rect x="4.5157%" y="85" width="0.0989%" height="15" fill="rgb(216,154,8)" fg:x="4887" fg:w="107"/><text x="4.7657%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (16 samples, 0.01%)</title><rect x="4.6146%" y="85" width="0.0148%" height="15" fill="rgb(244,35,45)" fg:x="4994" fg:w="16"/><text x="4.8646%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (241 samples, 0.22%)</title><rect x="4.4113%" y="101" width="0.2227%" height="15" fill="rgb(251,115,12)" fg:x="4774" fg:w="241"/><text x="4.6613%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (321 samples, 0.30%)</title><rect x="4.3420%" y="133" width="0.2966%" height="15" fill="rgb(240,54,50)" fg:x="4699" fg:w="321"/><text x="4.5920%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (279 samples, 0.26%)</title><rect x="4.3808%" y="117" width="0.2578%" height="15" fill="rgb(233,84,52)" fg:x="4741" fg:w="279"/><text x="4.6308%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (119 samples, 0.11%)</title><rect x="4.6765%" y="101" width="0.1100%" height="15" fill="rgb(207,117,47)" fg:x="5061" fg:w="119"/><text x="4.9265%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (60 samples, 0.06%)</title><rect x="4.7310%" y="85" width="0.0554%" height="15" fill="rgb(249,43,39)" fg:x="5120" fg:w="60"/><text x="4.9810%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (161 samples, 0.15%)</title><rect x="4.6386%" y="133" width="0.1488%" height="15" fill="rgb(209,38,44)" fg:x="5020" fg:w="161"/><text x="4.8886%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (133 samples, 0.12%)</title><rect x="4.6645%" y="117" width="0.1229%" height="15" fill="rgb(236,212,23)" fg:x="5048" fg:w="133"/><text x="4.9145%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (12 samples, 0.01%)</title><rect x="4.7874%" y="133" width="0.0111%" height="15" fill="rgb(242,79,21)" fg:x="5181" fg:w="12"/><text x="5.0374%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (248 samples, 0.23%)</title><rect x="4.8853%" y="117" width="0.2292%" height="15" fill="rgb(211,96,35)" fg:x="5287" fg:w="248"/><text x="5.1353%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (344 samples, 0.32%)</title><rect x="4.8077%" y="133" width="0.3179%" height="15" fill="rgb(253,215,40)" fg:x="5203" fg:w="344"/><text x="5.0577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.01%)</title><rect x="5.1145%" y="117" width="0.0111%" height="15" fill="rgb(211,81,21)" fg:x="5535" fg:w="12"/><text x="5.3645%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (30 samples, 0.03%)</title><rect x="5.1311%" y="133" width="0.0277%" height="15" fill="rgb(208,190,38)" fg:x="5553" fg:w="30"/><text x="5.3811%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (252 samples, 0.23%)</title><rect x="5.1588%" y="133" width="0.2329%" height="15" fill="rgb(235,213,38)" fg:x="5583" fg:w="252"/><text x="5.4088%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (26 samples, 0.02%)</title><rect x="5.3917%" y="133" width="0.0240%" height="15" fill="rgb(237,122,38)" fg:x="5835" fg:w="26"/><text x="5.6417%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (94 samples, 0.09%)</title><rect x="5.4157%" y="133" width="0.0869%" height="15" fill="rgb(244,218,35)" fg:x="5861" fg:w="94"/><text x="5.6657%" y="143.50"></text></g><g><title>trx`__rdl_alloc_zeroed (14 samples, 0.01%)</title><rect x="5.5026%" y="133" width="0.0129%" height="15" fill="rgb(240,68,47)" fg:x="5955" fg:w="14"/><text x="5.7526%" y="143.50"></text></g><g><title>trx`csv::string_record::StringRecord::trim (1,763 samples, 1.63%)</title><rect x="4.0084%" y="149" width="1.6291%" height="15" fill="rgb(210,16,53)" fg:x="4338" fg:w="1763"/><text x="4.2584%" y="159.50"></text></g><g><title>trx`core::str::_&lt;impl str&gt;::trim_matches (132 samples, 0.12%)</title><rect x="5.5155%" y="133" width="0.1220%" height="15" fill="rgb(235,124,12)" fg:x="5969" fg:w="132"/><text x="5.7655%" y="143.50"></text></g><g><title>trx`&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,497 samples, 6.00%)</title><rect x="0.0305%" y="165" width="6.0034%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="6497"/><text x="0.2805%" y="175.50">trx`&lt;csv..</text></g><g><title>trx`csv_core::reader::Reader::read_record (428 samples, 0.40%)</title><rect x="5.6384%" y="149" width="0.3955%" height="15" fill="rgb(250,166,2)" fg:x="6102" fg:w="428"/><text x="5.8884%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.03%)</title><rect x="6.4987%" y="117" width="0.0277%" height="15" fill="rgb(242,216,29)" fg:x="7033" fg:w="30"/><text x="6.7487%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.02%)</title><rect x="6.5024%" y="101" width="0.0240%" height="15" fill="rgb(230,116,27)" fg:x="7037" fg:w="26"/><text x="6.7524%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.02%)</title><rect x="6.5042%" y="85" width="0.0222%" height="15" fill="rgb(228,99,48)" fg:x="7039" fg:w="24"/><text x="6.7542%" y="95.50"></text></g><g><title>trx`crossbeam_channel::channel::Sender&lt;T&gt;::send (498 samples, 0.46%)</title><rect x="6.0690%" y="149" width="0.4602%" height="15" fill="rgb(253,11,6)" fg:x="6568" fg:w="498"/><text x="6.3190%" y="159.50"></text></g><g><title>trx`crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (455 samples, 0.42%)</title><rect x="6.1087%" y="133" width="0.4204%" height="15" fill="rgb(247,143,39)" fg:x="6611" fg:w="455"/><text x="6.3587%" y="143.50"></text></g><g><title>trx`&lt;lib::engines::stream_like::StreamLikeEngine as lib::engines::SyncEngine&gt;::publish_transaction (539 samples, 0.50%)</title><rect x="6.0339%" y="165" width="0.4981%" height="15" fill="rgb(236,97,10)" fg:x="6530" fg:w="539"/><text x="6.2839%" y="175.50"></text></g><g><title>dyld`start (7,093 samples, 6.55%)</title><rect x="0.0000%" y="293" width="6.5541%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="7093"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>trx`main (7,085 samples, 6.55%)</title><rect x="0.0074%" y="277" width="6.5467%" height="15" fill="rgb(216,164,2)" fg:x="8" fg:w="7085"/><text x="0.2574%" y="287.50">trx`main</text></g><g><title>trx`std::rt::lang_start_internal (7,085 samples, 6.55%)</title><rect x="0.0074%" y="261" width="6.5467%" height="15" fill="rgb(220,129,5)" fg:x="8" fg:w="7085"/><text x="0.2574%" y="271.50">trx`std::..</text></g><g><title>trx`std::rt::lang_start::_{{closure}} (7,085 samples, 6.55%)</title><rect x="0.0074%" y="245" width="6.5467%" height="15" fill="rgb(242,17,10)" fg:x="8" fg:w="7085"/><text x="0.2574%" y="255.50">trx`std::..</text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (7,085 samples, 6.55%)</title><rect x="0.0074%" y="229" width="6.5467%" height="15" fill="rgb(242,107,0)" fg:x="8" fg:w="7085"/><text x="0.2574%" y="239.50">trx`std::..</text></g><g><title>trx`trx::main (7,085 samples, 6.55%)</title><rect x="0.0074%" y="213" width="6.5467%" height="15" fill="rgb(251,28,31)" fg:x="8" fg:w="7085"/><text x="0.2574%" y="223.50">trx`trx::..</text></g><g><title>trx`lib::run_sync (7,085 samples, 6.55%)</title><rect x="0.0074%" y="197" width="6.5467%" height="15" fill="rgb(233,223,10)" fg:x="8" fg:w="7085"/><text x="0.2574%" y="207.50">trx`lib::..</text></g><g><title>trx`lib::engines::SyncEngine::process (7,074 samples, 6.54%)</title><rect x="0.0176%" y="181" width="6.5366%" height="15" fill="rgb(215,21,27)" fg:x="19" fg:w="7074"/><text x="0.2676%" y="191.50">trx`lib::..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (285 samples, 0.26%)</title><rect x="6.5541%" y="229" width="0.2633%" height="15" fill="rgb(232,23,21)" fg:x="7093" fg:w="285"/><text x="6.8041%" y="239.50"></text></g><g><title>trx`crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (240 samples, 0.22%)</title><rect x="6.8202%" y="229" width="0.2218%" height="15" fill="rgb(244,5,23)" fg:x="7381" fg:w="240"/><text x="7.0702%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (93,663 samples, 86.55%)</title><rect x="7.6611%" y="213" width="86.5471%" height="15" fill="rgb(226,81,46)" fg:x="8291" fg:w="93663"/><text x="7.9111%" y="223.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_pthread.dylib`cthread_yield (619 samples, 0.57%)</title><rect x="94.2137%" y="213" width="0.5720%" height="15" fill="rgb(247,70,30)" fg:x="101960" fg:w="619"/><text x="94.4637%" y="223.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (41 samples, 0.04%)</title><rect x="97.1503%" y="165" width="0.0379%" height="15" fill="rgb(212,68,19)" fg:x="105138" fg:w="41"/><text x="97.4003%" y="175.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (64 samples, 0.06%)</title><rect x="97.1882%" y="165" width="0.0591%" height="15" fill="rgb(240,187,13)" fg:x="105179" fg:w="64"/><text x="97.4382%" y="175.50"></text></g><g><title>trx`rust_decimal::ops::add::add_impl (12 samples, 0.01%)</title><rect x="97.2473%" y="165" width="0.0111%" height="15" fill="rgb(223,113,26)" fg:x="105243" fg:w="12"/><text x="97.4973%" y="175.50"></text></g><g><title>trx`&lt;lib::storage::Client as lib::storage::ClientStorage&gt;::deposit (171 samples, 0.16%)</title><rect x="97.1013%" y="181" width="0.1580%" height="15" fill="rgb(206,192,2)" fg:x="105085" fg:w="171"/><text x="97.3513%" y="191.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (21 samples, 0.02%)</title><rect x="97.2815%" y="165" width="0.0194%" height="15" fill="rgb(241,108,4)" fg:x="105280" fg:w="21"/><text x="97.5315%" y="175.50"></text></g><g><title>trx`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 0.03%)</title><rect x="97.3009%" y="165" width="0.0296%" height="15" fill="rgb(247,173,49)" fg:x="105301" fg:w="32"/><text x="97.5509%" y="175.50"></text></g><g><title>trx`&lt;lib::storage::Client as lib::storage::ClientStorage&gt;::withdraw (96 samples, 0.09%)</title><rect x="97.2593%" y="181" width="0.0887%" height="15" fill="rgb(224,114,35)" fg:x="105256" fg:w="96"/><text x="97.5093%" y="191.50"></text></g><g><title>trx`rust_decimal::ops::cmp::cmp_impl (13 samples, 0.01%)</title><rect x="97.3360%" y="165" width="0.0120%" height="15" fill="rgb(245,159,27)" fg:x="105339" fg:w="13"/><text x="97.5860%" y="175.50"></text></g><g><title>trx`lib::transaction::Transaction::transition (13 samples, 0.01%)</title><rect x="97.3499%" y="181" width="0.0120%" height="15" fill="rgb(245,172,44)" fg:x="105354" fg:w="13"/><text x="97.5999%" y="191.50"></text></g><g><title>trx`&lt;lib::storage::Client as lib::storage::ClientStorage&gt;::process_transaction (609 samples, 0.56%)</title><rect x="96.8010%" y="197" width="0.5627%" height="15" fill="rgb(236,23,11)" fg:x="104760" fg:w="609"/><text x="97.0510%" y="207.50"></text></g><g><title>trx`&lt;lib::engines::basic::BasicEngine as lib::engines::SyncEngine&gt;::publish_transaction (2,794 samples, 2.58%)</title><rect x="94.7857%" y="213" width="2.5817%" height="15" fill="rgb(205,117,38)" fg:x="102579" fg:w="2794"/><text x="95.0357%" y="223.50">tr..</text></g><g><title>trx`&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (37 samples, 0.03%)</title><rect x="97.8757%" y="197" width="0.0342%" height="15" fill="rgb(237,72,25)" fg:x="105923" fg:w="37"/><text x="98.1257%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.02%)</title><rect x="99.8873%" y="181" width="0.0240%" height="15" fill="rgb(244,70,9)" fg:x="108100" fg:w="26"/><text x="100.1373%" y="191.50"></text></g><g><title>trx`crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (2,785 samples, 2.57%)</title><rect x="97.3674%" y="213" width="2.5734%" height="15" fill="rgb(217,125,39)" fg:x="105373" fg:w="2785"/><text x="97.6174%" y="223.50">tr..</text></g><g><title>trx`crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (2,197 samples, 2.03%)</title><rect x="97.9108%" y="197" width="2.0301%" height="15" fill="rgb(235,36,10)" fg:x="105961" fg:w="2197"/><text x="98.1608%" y="207.50">t..</text></g><g><title>trx`&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (20 samples, 0.02%)</title><rect x="99.9224%" y="181" width="0.0185%" height="15" fill="rgb(251,123,47)" fg:x="108138" fg:w="20"/><text x="100.1724%" y="191.50"></text></g><g><title>trx`crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (28 samples, 0.03%)</title><rect x="99.9409%" y="213" width="0.0259%" height="15" fill="rgb(221,13,13)" fg:x="108158" fg:w="28"/><text x="100.1909%" y="223.50"></text></g><g><title>trx`std::sys_common::backtrace::__rust_begin_short_backtrace (100,579 samples, 92.94%)</title><rect x="7.0420%" y="229" width="92.9377%" height="15" fill="rgb(238,131,9)" fg:x="7621" fg:w="100579"/><text x="7.2920%" y="239.50">trx`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>trx`std::thread::yield_now (14 samples, 0.01%)</title><rect x="99.9667%" y="213" width="0.0129%" height="15" fill="rgb(211,50,8)" fg:x="108186" fg:w="14"/><text x="100.2167%" y="223.50"></text></g><g><title>all (108,222 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="108222"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (101,129 samples, 93.45%)</title><rect x="6.5541%" y="293" width="93.4459%" height="15" fill="rgb(242,14,37)" fg:x="7093" fg:w="101129"/><text x="6.8041%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (101,129 samples, 93.45%)</title><rect x="6.5541%" y="277" width="93.4459%" height="15" fill="rgb(246,228,12)" fg:x="7093" fg:w="101129"/><text x="6.8041%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>trx`std::sys::unix::thread::Thread::new::thread_start (101,129 samples, 93.45%)</title><rect x="6.5541%" y="261" width="93.4459%" height="15" fill="rgb(213,55,15)" fg:x="7093" fg:w="101129"/><text x="6.8041%" y="271.50">trx`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>trx`core::ops::function::FnOnce::call_once{{vtable.shim}} (101,129 samples, 93.45%)</title><rect x="6.5541%" y="245" width="93.4459%" height="15" fill="rgb(209,9,3)" fg:x="7093" fg:w="101129"/><text x="6.8041%" y="255.50">trx`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>trx`std::thread::yield_now (22 samples, 0.02%)</title><rect x="99.9797%" y="229" width="0.0203%" height="15" fill="rgb(230,59,30)" fg:x="108200" fg:w="22"/><text x="100.2297%" y="239.50"></text></g></svg></svg>